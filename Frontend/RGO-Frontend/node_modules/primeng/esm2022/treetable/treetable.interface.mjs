export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"treetable.interface.js","sourceRoot":"","sources":["../../../src/app/components/treetable/treetable.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { TemplateRef } from '@angular/core';\nimport { FilterMetadata, LazyLoadMeta, SortMeta, TreeNode, TreeTableNode } from 'primeng/api';\nimport { TreeTable } from './treetable';\n/**\n * Paginator state.\n * @group Interface\n */\nexport interface TreeTablePaginatorState {\n    /**\n     * Current page.\n     */\n    page?: number;\n    /**\n     * Index of the first element.\n     */\n    first?: number;\n    /**\n     * Row count.\n     */\n    rows?: number;\n    /**\n     * Page count.\n     */\n    pageCount?: number;\n}\n/**\n * Custom lazy load event.\n * @see {@link TreeTable.onLazyLoad}\n * @extends {LazyLoadMeta}\n * @group Events\n */\nexport interface TreeTableLazyLoadEvent extends LazyLoadMeta {\n    /**\n     * First element in viewport.\n     */\n    first: any;\n    /**\n     * Last element in viewport.\n     */\n    last: any;\n}\n/**\n * Custom column reorder event.\n * @see {@link TreeTable.onColReorder}\n * @group Events\n */\nexport interface TreeTableColumnReorderEvent {\n    /**\n     * Index of the dragged item.\n     */\n    dragIndex?: number;\n    /**\n     * Index of the drop position.\n     */\n    dropIndex?: number;\n    /**\n     * Columns after reorder.\n     */\n    columns?: any[];\n}\n/**\n * Custom filter event.\n * @see {@link TreeTable.onFilter}\n * @group Events\n */\nexport interface TreeTableFilterEvent {\n    /**\n     * Filter meta.\n     */\n    filters?: { [s: string]: FilterMetadata | undefined };\n    /**\n     * Value after filter.\n     */\n    filteredValue?: TreeNode[];\n}\n/**\n * Custom node expand event.\n * @see {@link TreeTable.onNodeExpand}\n * @group Events\n */\nexport interface TreeTableNodeExpandEvent<T = any> extends TreeTableNodeCollapseEvent<T> {}\n/**\n * Custom node collapse event.\n * @see {@link TreeTable.onNodeCollapse}\n * @group Events\n */\nexport interface TreeTableNodeCollapseEvent<T = any> {\n    /**\n     * Browser event.\n     */\n    originalEvent: Event;\n    /**\n     * Node instance.\n     */\n    node: TreeTableNode<T>;\n}\n/**\n * Custom sort event.\n * @see {@link TreeTable.onSort}\n * @see {@link TreeTable.sortFunction}\n * @group Events\n */\nexport interface TreeTableSortEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent?: Event;\n    /**\n     * Value to be sorted.\n     */\n    data?: TreeNode[];\n    /**\n     * Sort mode.\n     */\n    mode?: 'single' | 'multiple';\n    /**\n     * Sort field.\n     */\n    field?: string;\n    /**\n     * Sort order.\n     */\n    order?: number;\n    /**\n     * Multiple sort meta.\n     */\n    multiSortMeta?: SortMeta[] | null | undefined;\n    /**\n     * Multiple sort meta.\n     */\n    multisortmeta?: any;\n    /**\n     * Sort meta.\n     */\n    sortMeta?: SortMeta;\n}\n/**\n * Custom column resize event.\n * @see {@link TreeTable.onColResize}\n * @group Events\n */\nexport interface TreeTableColResizeEvent {\n    /**\n     * Instance of resized column.\n     */\n    element: HTMLElement;\n    /**\n     * Position.\n     */\n    delta: number;\n}\n/**\n * Custom node select event.\n * @see {@link TreeTable.onNodeSelect}\n * @extends {TreeTableNode}\n * @group Events\n */\nexport interface TreeTableNodeSelectEvent extends TreeTableNode {}\n/**\n * Custom node unselect event.\n * @see {@link TreeTable.onNodeUnSelect}\n * @group Events\n */\nexport interface TreeTableNodeUnSelectEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent?: Event;\n    /**\n     * Node instance.\n     */\n    node?: TreeTableNode<any>;\n    /**\n     * Selection type.\n     */\n    type?: string;\n}\n/**\n * Custom context menu select event.\n * @see {@link TreeTable.onContextMenuSelect}\n * @group Events\n */\nexport interface TreeTableContextMenuSelectEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent: Event;\n    /**\n     * Node instance.\n     */\n    node: TreeTableNode<any>;\n}\n/**\n * Custom checkbox toggle event.\n * @see {@link TreeTable.onHeaderCheckboxToggle}\n * @group Events\n */\nexport interface TreeTableHeaderCheckboxToggleEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent: Event;\n    /**\n     * Checked state.\n     */\n    checked: boolean;\n}\n/**\n * Custom edit event.\n * @see {@link TreeTable.onEditInit}\n * @see {@link TreeTable.onEditCancel}\n * @see {@link TreeTable.onEditComplete}\n * @group Events\n */\nexport interface TreeTableEditEvent {\n    /**\n     * Field to be edited.\n     */\n    field: string;\n    /**\n     * New value.\n     */\n    data: string;\n}\n/**\n * Filtering options.\n * @group Interface\n */\nexport interface TreeTableFilterOptions {\n    /**\n     * Field to be filtered.\n     */\n    filterField: string;\n    /**\n     * Value to use when filtering.\n     */\n    filterValue: any;\n    /**\n     * Filter constraints.\n     */\n    filterConstraint: (dataFieldValue: any, filterValue: any, filterLocale: string) => boolean;\n    /**\n     * Boolean value that defines if strict mode enabled.\n     */\n    isStrictMode: boolean;\n}\n/**\n * Defines valid templates in TreeTable.\n * @group Templates\n */\nexport interface TreeTableTemplates {\n    /**\n     * Custom caption template.\n     */\n    caption(): TemplateRef<any>;\n    /**\n     * Custom header template.\n     * @param {Object} context - header data.\n     */\n    header(context: {\n        /**\n         * Columns instance.\n         */\n        $implicit: any[];\n    }): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom body template.\n     * @param {Object} context - body data.\n     */\n    body(context: {\n        $implicit: TreeNode;\n        /**\n         * Serialized node.\n         */\n        node: TreeNode;\n        /**\n         * Row data.\n         */\n        rowData: any;\n        /**\n         * Columns instance.\n         */\n        columns: any[];\n    }): TemplateRef<{ $implicit: TreeNode; node: TreeNode; rowData: any; columns: any[] }>;\n    /**\n     * Custom footer template.\n     * @param {Object} context - footer data.\n     */\n    footer(context: {\n        /**\n         * Columns instance.\n         */\n        $implicit: any[];\n    }): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom summary template.\n     */\n    summary(): TemplateRef<any>;\n    /**\n     * Custom colgroup template.\n     * @param {Object} context - column group data.\n     */\n    colgroup(context: {\n        /**\n         * Columns instance.\n         */\n        $implicit: any[];\n    }): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom emptymessage template.\n     */\n    emptymessage(context: {\n        /**\n         * Columns instance.\n         */\n        $implicit: any[];\n        /**\n         * Boolean value indicates whether column is frozen.\n         */\n        frozen: boolean;\n    }): TemplateRef<{ $implicit: any[]; frozen: boolean }>;\n    /**\n     * Custom paginator left section template.\n     */\n    paginatorleft(): TemplateRef<any>;\n    /**\n     * Custom paginator right section template.\n     */\n    paginatorright(): TemplateRef<any>;\n    /**\n     * Custom paginator dropdown template.\n     */\n    paginatordropdownitem(): TemplateRef<any>;\n    /**\n     * Custom frozenheader template.\n     * @param {Object} context - frozen header data.\n     */\n    frozenheader(context: {\n        /**\n         * Columns instance.\n         */\n        $implicit: any[];\n    }): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom frozenbody template.\n     */\n    frozenbody(): TemplateRef<any>;\n    /**\n     * Custom frozenfooter template.\n     * @param {Object} context - frozen footer data.\n     */\n    frozenfooter(context: {\n        /**\n         * Columns instance.\n         */\n        $implicit: any[];\n    }): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom frozen column group template.\n     * @param {Object} context - group data.\n     */\n    frozencolgroup(context: {\n        /**\n         * Columns instance.\n         */\n        $implicit: any[];\n    }): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom loading icon template.\n     */\n    loadingicon(): TemplateRef<any>;\n    /**\n     * Custom reorder indicator up icon template.\n     */\n    reorderindicatorupicon(): TemplateRef<any>;\n    /**\n     * Custom reorder indicator down icon template.\n     */\n    reorderindicatordownicon(): TemplateRef<any>;\n    /**\n     * Custom sort icon template.\n     * @param {Object} context - sort data.\n     */\n    sorticon(context: {\n        /**\n         * Sort order.\n         */\n        $implicit: number;\n    }): TemplateRef<{ $implicit: number }>;\n    /**\n     * Custom checkbox icon template.\n     * @param {Object} context - checkbox data.\n     */\n    checkboxicon(context: {\n        /**\n         * Checkbox state.\n         */\n        $implicit: boolean;\n        /**\n         * Partial selection state of row node.\n         */\n        partialSelected: boolean;\n    }): TemplateRef<{ $implicit: boolean; partialSelected: boolean }>;\n    /**\n     * Custom header checkbox icon template.\n     * @param {Object} context - checkbox data.\n     */\n    headercheckboxicon(context: {\n        /**\n         * Checkbox state.\n         */\n        $implicit: boolean;\n    }): TemplateRef<{ $implicit: boolean }>;\n    /**\n     * Custom toggler icon template.\n     * @param {Object} context - toggle icon data.\n     */\n    togglericon(context: {\n        /**\n         * Expand state of row node.\n         */\n        $implicit: boolean;\n    }): TemplateRef<{ $implicit: boolean }>;\n    /**\n     * Custom paginator first page link icon template.\n     */\n    paginatorfirstpagelinkicon(): TemplateRef<any>;\n    /**\n     * Custom paginatorlastpagelinkicon template.\n     */\n    paginatorlastpagelinkicon(): TemplateRef<any>;\n    /**\n     * Custom paginatorpreviouspagelinkicon template.\n     */\n    paginatorpreviouspagelinkicon(): TemplateRef<any>;\n    /**\n     * Custom paginatornextpagelinkicon template.\n     */\n    paginatornextpagelinkicon(): TemplateRef<any>;\n}\n"]}