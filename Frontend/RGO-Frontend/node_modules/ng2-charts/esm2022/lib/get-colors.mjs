import { baseColors } from './base-colors';
export const builtInDefaults = {
    plugins: { colors: { enabled: false } },
    datasets: {
        line: {
            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.4),
            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),
            pointBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 1),
            pointBorderColor: '#fff',
        },
        bar: {
            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.6),
            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),
        },
        get radar() {
            return this.line;
        },
        doughnut: {
            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),
            borderColor: '#fff',
        },
        get pie() {
            return this.doughnut;
        },
        polarArea: {
            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),
            borderColor: (context) => rgba(generateColor(context.dataIndex), 1),
        },
        get bubble() {
            return this.doughnut;
        },
        get scatter() {
            return this.doughnut;
        },
        get area() {
            return this.polarArea;
        },
    },
};
function rgba(colour, alpha) {
    return 'rgba(' + colour.concat(alpha).join(',') + ')';
}
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
function getRandomColor() {
    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
}
/**
 * Generate colors
 */
function generateColor(index = 0) {
    return baseColors[index] || getRandomColor();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWNvbG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmcyLWNoYXJ0cy9zcmMvbGliL2dldC1jb2xvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUc7SUFDN0IsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQ3ZDLFFBQVEsRUFBRTtRQUNSLElBQUksRUFBRTtZQUNKLGVBQWUsRUFBRSxDQUFDLE9BQVksRUFBRSxFQUFFLENBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUNoRCxXQUFXLEVBQUUsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUMsb0JBQW9CLEVBQUUsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUNyQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUMsZ0JBQWdCLEVBQUUsTUFBTTtTQUN6QjtRQUNELEdBQUcsRUFBRTtZQUNILGVBQWUsRUFBRSxDQUFDLE9BQVksRUFBRSxFQUFFLENBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUNoRCxXQUFXLEVBQUUsQ0FBQyxPQUFZLEVBQUUsRUFBRSxDQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0M7UUFDRCxJQUFJLEtBQUs7WUFDUCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkIsQ0FBQztRQUNELFFBQVEsRUFBRTtZQUNSLGVBQWUsRUFBRSxDQUFDLE9BQVksRUFBRSxFQUFFLENBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUM3QyxXQUFXLEVBQUUsTUFBTTtTQUNwQjtRQUNELElBQUksR0FBRztZQUNMLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsZUFBZSxFQUFFLENBQUMsT0FBWSxFQUFFLEVBQUUsQ0FDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1lBQzdDLFdBQVcsRUFBRSxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsSUFBSSxNQUFNO1lBQ1IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxJQUFJLE9BQU87WUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkIsQ0FBQztRQUNELElBQUksSUFBSTtZQUNOLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsU0FBUyxJQUFJLENBQUMsTUFBcUIsRUFBRSxLQUFhO0lBQ2hELE9BQU8sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUN4RCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsR0FBVyxFQUFFLEdBQVc7SUFDNUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsY0FBYztJQUNyQixPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1RSxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLGFBQWEsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUM5QixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxjQUFjLEVBQUUsQ0FBQztBQUMvQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFzZUNvbG9ycyB9IGZyb20gJy4vYmFzZS1jb2xvcnMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdjaGFydC5qcyc7XG5cbmV4cG9ydCBjb25zdCBidWlsdEluRGVmYXVsdHMgPSB7XG4gIHBsdWdpbnM6IHsgY29sb3JzOiB7IGVuYWJsZWQ6IGZhbHNlIH0gfSxcbiAgZGF0YXNldHM6IHtcbiAgICBsaW5lOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IChjb250ZXh0OiBhbnkpID0+XG4gICAgICAgIHJnYmEoZ2VuZXJhdGVDb2xvcihjb250ZXh0LmRhdGFzZXRJbmRleCksIDAuNCksXG4gICAgICBib3JkZXJDb2xvcjogKGNvbnRleHQ6IGFueSkgPT5cbiAgICAgICAgcmdiYShnZW5lcmF0ZUNvbG9yKGNvbnRleHQuZGF0YXNldEluZGV4KSwgMSksXG4gICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogKGNvbnRleHQ6IGFueSkgPT5cbiAgICAgICAgcmdiYShnZW5lcmF0ZUNvbG9yKGNvbnRleHQuZGF0YXNldEluZGV4KSwgMSksXG4gICAgICBwb2ludEJvcmRlckNvbG9yOiAnI2ZmZicsXG4gICAgfSxcbiAgICBiYXI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKGNvbnRleHQ6IGFueSkgPT5cbiAgICAgICAgcmdiYShnZW5lcmF0ZUNvbG9yKGNvbnRleHQuZGF0YXNldEluZGV4KSwgMC42KSxcbiAgICAgIGJvcmRlckNvbG9yOiAoY29udGV4dDogYW55KSA9PlxuICAgICAgICByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhc2V0SW5kZXgpLCAxKSxcbiAgICB9LFxuICAgIGdldCByYWRhcigpOiB7IFtrZXk6IHN0cmluZ106ICgoY29udGV4dDogYW55KSA9PiBDb2xvcikgfCBDb2xvciB9IHtcbiAgICAgIHJldHVybiB0aGlzLmxpbmU7XG4gICAgfSxcbiAgICBkb3VnaG51dDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoY29udGV4dDogYW55KSA9PlxuICAgICAgICByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhSW5kZXgpLCAwLjYpLFxuICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgICB9LFxuICAgIGdldCBwaWUoKTogeyBba2V5OiBzdHJpbmddOiAoKGNvbnRleHQ6IGFueSkgPT4gQ29sb3IpIHwgQ29sb3IgfSB7XG4gICAgICByZXR1cm4gdGhpcy5kb3VnaG51dDtcbiAgICB9LFxuICAgIHBvbGFyQXJlYToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoY29udGV4dDogYW55KSA9PlxuICAgICAgICByZ2JhKGdlbmVyYXRlQ29sb3IoY29udGV4dC5kYXRhSW5kZXgpLCAwLjYpLFxuICAgICAgYm9yZGVyQ29sb3I6IChjb250ZXh0OiBhbnkpID0+IHJnYmEoZ2VuZXJhdGVDb2xvcihjb250ZXh0LmRhdGFJbmRleCksIDEpLFxuICAgIH0sXG4gICAgZ2V0IGJ1YmJsZSgpOiB7IFtrZXk6IHN0cmluZ106ICgoY29udGV4dDogYW55KSA9PiBDb2xvcikgfCBDb2xvciB9IHtcbiAgICAgIHJldHVybiB0aGlzLmRvdWdobnV0O1xuICAgIH0sXG4gICAgZ2V0IHNjYXR0ZXIoKTogeyBba2V5OiBzdHJpbmddOiAoKGNvbnRleHQ6IGFueSkgPT4gQ29sb3IpIHwgQ29sb3IgfSB7XG4gICAgICByZXR1cm4gdGhpcy5kb3VnaG51dDtcbiAgICB9LFxuICAgIGdldCBhcmVhKCk6IHsgW2tleTogc3RyaW5nXTogKChjb250ZXh0OiBhbnkpID0+IENvbG9yKSB8IENvbG9yIH0ge1xuICAgICAgcmV0dXJuIHRoaXMucG9sYXJBcmVhO1xuICAgIH0sXG4gIH0sXG59O1xuXG5mdW5jdGlvbiByZ2JhKGNvbG91cjogQXJyYXk8bnVtYmVyPiwgYWxwaGE6IG51bWJlcik6IENvbG9yIHtcbiAgcmV0dXJuICdyZ2JhKCcgKyBjb2xvdXIuY29uY2F0KGFscGhhKS5qb2luKCcsJykgKyAnKSc7XG59XG5cbmZ1bmN0aW9uIGdldFJhbmRvbUludChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZG9tQ29sb3IoKTogbnVtYmVyW10ge1xuICByZXR1cm4gW2dldFJhbmRvbUludCgwLCAyNTUpLCBnZXRSYW5kb21JbnQoMCwgMjU1KSwgZ2V0UmFuZG9tSW50KDAsIDI1NSldO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGNvbG9yc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbG9yKGluZGV4ID0gMCk6IG51bWJlcltdIHtcbiAgcmV0dXJuIGJhc2VDb2xvcnNbaW5kZXhdIHx8IGdldFJhbmRvbUNvbG9yKCk7XG59XG4iXX0=