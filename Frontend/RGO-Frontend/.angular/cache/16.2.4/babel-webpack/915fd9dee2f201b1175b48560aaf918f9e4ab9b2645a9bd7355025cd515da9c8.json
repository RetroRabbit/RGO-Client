{"ast":null,"code":"import { API } from '../models/constants/urls.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"ngx-cookie-service\";\nexport class EmployeeProfileService {\n  constructor(client, appStore, employeeStore, cookieService) {\n    this.client = client;\n    this.appStore = appStore;\n    this.employeeStore = employeeStore;\n    this.cookieService = cookieService;\n    this.email = '';\n    this.token = '';\n    this.cookieEmail = this.cookieService.get('userEmail');\n  }\n  GetEmployeeProfile() {\n    return this.client.get(`${API.HttpsBaseURL}/employee/get`);\n  }\n  getToken() {\n    this.employeeStore.select('employees').subscribe(state => {\n      this.email = state.selectedEmployee.email;\n    });\n    this.appStore.select('app').subscribe(state => {\n      this.token = state.token;\n      if (this.email != '' || this.email) {\n        return;\n      }\n      this.email = state.email;\n    });\n  }\n  UpdateEmployeeProfile(profileUpdate) {\n    console.log(profileUpdate.updatedProfile.email);\n    return this.client.put(`${API.HttpsBaseURL}/employee/update?email=${profileUpdate.updatedProfile.email}`, profileUpdate.updatedProfile);\n  }\n  static #_ = this.ɵfac = function EmployeeProfileService_Factory(t) {\n    return new (t || EmployeeProfileService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.CookieService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeProfileService,\n    factory: EmployeeProfileService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["API","EmployeeProfileService","constructor","client","appStore","employeeStore","cookieService","email","token","cookieEmail","get","GetEmployeeProfile","HttpsBaseURL","getToken","select","subscribe","state","selectedEmployee","UpdateEmployeeProfile","profileUpdate","console","log","updatedProfile","put","_","i0","ɵɵinject","i1","HttpClient","i2","Store","i3","CookieService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\HP\\Desktop\\GOP\\RGO-Client\\Frontend\\RGO-Frontend\\src\\app\\services\\employee-profile.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { API } from '../models/constants/urls.constants';\r\nimport { EmployeeProfile } from '../models/employee-profile.interface';\r\nimport { Token } from '../models/token.interface';\r\nimport { Store } from '@ngrx/store';\r\nimport { EmployeeState } from '../store/reducers/employee.reducer';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeProfileService {\r\n  email: string = '';\r\n  token: string = '';\r\n  cookieEmail = this.cookieService.get('userEmail');\r\n  constructor(private client: HttpClient,private appStore:Store<{app:Token}>, private employeeStore:Store<{employees:EmployeeState}>, private cookieService: CookieService) { }\r\n\r\n  GetEmployeeProfile(): Observable<EmployeeProfile> {\r\n\r\n    return this.client.get<EmployeeProfile>(`${API.HttpsBaseURL}/employee/get`);\r\n  }\r\n\r\n  getToken() {\r\n    this.employeeStore.select('employees').subscribe(state => {\r\n        this.email = state.selectedEmployee.email!;\r\n    });\r\n\r\n    this.appStore.select('app').subscribe(state => {\r\n      this.token = state.token;\r\n      if (this.email != '' || this.email) {\r\n        return;\r\n      }\r\n      this.email = state.email;\r\n    })\r\n  }\r\n\r\n\r\n  UpdateEmployeeProfile(profileUpdate: any): Observable<any> {\r\n    console.log(profileUpdate.updatedProfile.email)\r\n    return this.client.put<any>(\r\n      `${API.HttpsBaseURL}/employee/update?email=${profileUpdate.updatedProfile.email}`, profileUpdate.updatedProfile\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,oCAAoC;;;;;AAUxD,OAAM,MAAOC,sBAAsB;EAIjCC,YAAoBC,MAAkB,EAASC,QAA2B,EAAUC,aAA8C,EAAUC,aAA4B;IAApJ,KAAAH,MAAM,GAANA,MAAM;IAAqB,KAAAC,QAAQ,GAARA,QAAQ;IAA6B,KAAAC,aAAa,GAAbA,aAAa;IAA2C,KAAAC,aAAa,GAAbA,aAAa;IAHzJ,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,WAAW,GAAG,IAAI,CAACH,aAAa,CAACI,GAAG,CAAC,WAAW,CAAC;EAC2H;EAE5KC,kBAAkBA,CAAA;IAEhB,OAAO,IAAI,CAACR,MAAM,CAACO,GAAG,CAAkB,GAAGV,GAAG,CAACY,YAAY,eAAe,CAAC;EAC7E;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACR,aAAa,CAACS,MAAM,CAAC,WAAW,CAAC,CAACC,SAAS,CAACC,KAAK,IAAG;MACrD,IAAI,CAACT,KAAK,GAAGS,KAAK,CAACC,gBAAgB,CAACV,KAAM;IAC9C,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACU,MAAM,CAAC,KAAK,CAAC,CAACC,SAAS,CAACC,KAAK,IAAG;MAC5C,IAAI,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK;MACxB,IAAI,IAAI,CAACD,KAAK,IAAI,EAAE,IAAI,IAAI,CAACA,KAAK,EAAE;QAClC;;MAEF,IAAI,CAACA,KAAK,GAAGS,KAAK,CAACT,KAAK;IAC1B,CAAC,CAAC;EACJ;EAGAW,qBAAqBA,CAACC,aAAkB;IACtCC,OAAO,CAACC,GAAG,CAACF,aAAa,CAACG,cAAc,CAACf,KAAK,CAAC;IAC/C,OAAO,IAAI,CAACJ,MAAM,CAACoB,GAAG,CACpB,GAAGvB,GAAG,CAACY,YAAY,0BAA0BO,aAAa,CAACG,cAAc,CAACf,KAAK,EAAE,EAAEY,aAAa,CAACG,cAAc,CAChH;EACH;EAAC,QAAAE,CAAA,G;qBA/BUvB,sBAAsB,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBhC,sBAAsB;IAAAiC,OAAA,EAAtBjC,sBAAsB,CAAAkC,IAAA;IAAAC,UAAA,EAFrB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}