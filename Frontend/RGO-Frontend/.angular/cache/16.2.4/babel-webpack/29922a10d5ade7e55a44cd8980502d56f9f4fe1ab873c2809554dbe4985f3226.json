{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@auth0/auth0-angular\";\nimport * as i3 from \"ngx-cookie-service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(appStore, auth, cookieService) {\n      this.appStore = appStore;\n      this.auth = auth;\n      this.cookieService = cookieService;\n      this.token = '';\n      this.getToken();\n    }\n    intercept(req, next) {\n      const token = this.cookieService.get('userToken');\n      const authReq = req.clone({\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        })\n      });\n      return next.handle(authReq).pipe(tap({\n        error: error => {\n          if (error.status === 403 || error.status === 401) {\n            this.auth.logout({\n              logoutParams: {\n                returnTo: document.location.origin\n              }\n            });\n          }\n        }\n      }));\n    }\n    getToken() {\n      this.appStore.select('app').subscribe(state => {\n        this.token = state.token;\n      });\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.CookieService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}