{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { VERSION, InjectionToken, Injectable, Optional, Inject, NgModule, inject } from '@angular/core';\nimport { BehaviorSubject, Subject, ReplaySubject, merge, defer, of, iif, from, throwError } from 'rxjs';\nimport { scan, filter, distinctUntilChanged, switchMap, mergeMap, shareReplay, concatMap, catchError, tap, takeUntil, withLatestFrom, map, take, first, mapTo, pluck } from 'rxjs/operators';\nimport * as i4 from '@auth0/auth0-spa-js';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nexport { AuthenticationError, GenericError, InMemoryCache, LocalStorageCache, MfaRequiredError, MissingRefreshTokenError, PopupCancelledError, PopupTimeoutError, TimeoutError, User } from '@auth0/auth0-spa-js';\nimport { Router } from '@angular/router';\nimport * as i1 from '@angular/common';\nvar useragent = {\n  name: '@auth0/auth0-angular',\n  version: '2.2.1'\n};\nclass Auth0ClientFactory {\n  static createClient(configFactory) {\n    const config = configFactory.get();\n    if (!config) {\n      throw new Error('Configuration must be specified either through AuthModule.forRoot or through AuthClientConfig.set');\n    }\n    return new Auth0Client({\n      ...config,\n      auth0Client: {\n        name: useragent.name,\n        version: useragent.version,\n        env: {\n          'angular/core': VERSION.full\n        }\n      }\n    });\n  }\n}\nconst Auth0ClientService = new InjectionToken('auth0.client');\n\n/**\n * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.\n *\n * @param def The route definition type\n */\nfunction isHttpInterceptorRouteConfig(def) {\n  return typeof def !== 'string';\n}\n/**\n * Injection token for accessing configuration.\n *\n * @usageNotes\n *\n * Use the `Inject` decorator to access the configuration from a service or component:\n *\n * ```\n * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}\n * ```\n */\nconst AuthConfigService = new InjectionToken('auth0-angular.config');\n/**\n * Gets and sets configuration for the internal Auth0 client. This can be\n * used to provide configuration outside of using AuthModule.forRoot, i.e. from\n * a factory provided by APP_INITIALIZER.\n *\n * @usage\n *\n * ```js\n * // app.module.ts\n * // ---------------------------\n * import { AuthModule, AuthClientConfig } from '@auth0/auth0-angular';\n *\n * // Provide an initializer function that returns a Promise\n * function configInitializer(\n *   http: HttpClient,\n *   config: AuthClientConfig\n * ) {\n *   return () =>\n *     http\n *       .get('/config')\n *       .toPromise()\n *       .then((loadedConfig: any) => config.set(loadedConfig));   // Set the config that was loaded asynchronously here\n * }\n *\n * // Provide APP_INITIALIZER with this function. Note that there is no config passed to AuthModule.forRoot\n * imports: [\n *   // other imports..\n *\n *   HttpClientModule,\n *   AuthModule.forRoot(),   //<- don't pass any config here\n * ],\n * providers: [\n *   {\n *     provide: APP_INITIALIZER,\n *     useFactory: configInitializer,    // <- pass your initializer function here\n *     deps: [HttpClient, AuthClientConfig],\n *     multi: true,\n *   },\n * ],\n * ```\n *\n */\nlet AuthClientConfig = /*#__PURE__*/(() => {\n  class AuthClientConfig {\n    constructor(config) {\n      if (config) {\n        this.set(config);\n      }\n    }\n    /**\n     * Sets configuration to be read by other consumers of the service (see usage notes)\n     *\n     * @param config The configuration to set\n     */\n    set(config) {\n      this.config = config;\n    }\n    /**\n     * Gets the config that has been set by other consumers of the service\n     */\n    get() {\n      return this.config;\n    }\n  }\n  AuthClientConfig.ɵfac = function AuthClientConfig_Factory(t) {\n    return new (t || AuthClientConfig)(i0.ɵɵinject(AuthConfigService, 8));\n  };\n  AuthClientConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AuthClientConfig,\n    factory: AuthClientConfig.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthClientConfig;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AbstractNavigator = /*#__PURE__*/(() => {\n  class AbstractNavigator {\n    constructor(location, injector) {\n      this.location = location;\n      try {\n        this.router = injector.get(Router);\n      } catch {}\n    }\n    /**\n     * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n     * to `window.history.replaceState`.\n     *\n     * @param url The url to navigate to\n     */\n    navigateByUrl(url) {\n      if (this.router) {\n        this.router.navigateByUrl(url);\n        return;\n      }\n      this.location.replaceState(url);\n    }\n  }\n  AbstractNavigator.ɵfac = function AbstractNavigator_Factory(t) {\n    return new (t || AbstractNavigator)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i0.Injector));\n  };\n  AbstractNavigator.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AbstractNavigator,\n    factory: AbstractNavigator.ɵfac,\n    providedIn: 'root'\n  });\n  return AbstractNavigator;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Tracks the Authentication State for the SDK\n */\nlet AuthState = /*#__PURE__*/(() => {\n  class AuthState {\n    constructor(auth0Client) {\n      this.auth0Client = auth0Client;\n      this.isLoadingSubject$ = new BehaviorSubject(true);\n      this.refresh$ = new Subject();\n      this.accessToken$ = new ReplaySubject(1);\n      this.errorSubject$ = new ReplaySubject(1);\n      /**\n       * Emits boolean values indicating the loading state of the SDK.\n       */\n      this.isLoading$ = this.isLoadingSubject$.asObservable();\n      /**\n       * Trigger used to pull User information from the Auth0Client.\n       * Triggers when the access token has changed.\n       */\n      this.accessTokenTrigger$ = this.accessToken$.pipe(scan((acc, current) => ({\n        previous: acc.current,\n        current\n      }), {\n        current: null,\n        previous: null\n      }), filter(({\n        previous,\n        current\n      }) => previous !== current));\n      /**\n       * Trigger used to pull User information from the Auth0Client.\n       * Triggers when an event occurs that needs to retrigger the User Profile information.\n       * Events: Login, Access Token change and Logout\n       */\n      this.isAuthenticatedTrigger$ = this.isLoading$.pipe(filter(loading => !loading), distinctUntilChanged(), switchMap(() =>\n      // To track the value of isAuthenticated over time, we need to merge:\n      //  - the current value\n      //  - the value whenever the access token changes. (this should always be true of there is an access token\n      //    but it is safer to pass this through this.auth0Client.isAuthenticated() nevertheless)\n      //  - the value whenever refreshState$ emits\n      merge(defer(() => this.auth0Client.isAuthenticated()), this.accessTokenTrigger$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())), this.refresh$.pipe(mergeMap(() => this.auth0Client.isAuthenticated())))));\n      /**\n       * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n       * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n       */\n      this.isAuthenticated$ = this.isAuthenticatedTrigger$.pipe(distinctUntilChanged(), shareReplay(1));\n      /**\n       * Emits details about the authenticated user, or null if not authenticated.\n       */\n      this.user$ = this.isAuthenticatedTrigger$.pipe(concatMap(authenticated => authenticated ? this.auth0Client.getUser() : of(null)), distinctUntilChanged());\n      /**\n       * Emits ID token claims when authenticated, or null if not authenticated.\n       */\n      this.idTokenClaims$ = this.isAuthenticatedTrigger$.pipe(concatMap(authenticated => authenticated ? this.auth0Client.getIdTokenClaims() : of(null)));\n      /**\n       * Emits errors that occur during login, or when checking for an active session on startup.\n       */\n      this.error$ = this.errorSubject$.asObservable();\n    }\n    /**\n     * Update the isLoading state using the provided value\n     *\n     * @param isLoading The new value for isLoading\n     */\n    setIsLoading(isLoading) {\n      this.isLoadingSubject$.next(isLoading);\n    }\n    /**\n     * Refresh the state to ensure the `isAuthenticated`, `user$` and `idTokenClaims$`\n     * reflect the most up-to-date values from  Auth0Client.\n     */\n    refresh() {\n      this.refresh$.next();\n    }\n    /**\n     * Update the access token, doing so will also refresh the state.\n     *\n     * @param accessToken The new Access Token\n     */\n    setAccessToken(accessToken) {\n      this.accessToken$.next(accessToken);\n    }\n    /**\n     * Emits the error in the `error$` observable.\n     *\n     * @param error The new error\n     */\n    setError(error) {\n      this.errorSubject$.next(error);\n    }\n  }\n  AuthState.ɵfac = function AuthState_Factory(t) {\n    return new (t || AuthState)(i0.ɵɵinject(Auth0ClientService));\n  };\n  AuthState.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AuthState,\n    factory: AuthState.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthState;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(auth0Client, configFactory, navigator, authState) {\n      this.auth0Client = auth0Client;\n      this.configFactory = configFactory;\n      this.navigator = navigator;\n      this.authState = authState;\n      this.appStateSubject$ = new ReplaySubject(1);\n      // https://stackoverflow.com/a/41177163\n      this.ngUnsubscribe$ = new Subject();\n      /**\n       * Emits boolean values indicating the loading state of the SDK.\n       */\n      this.isLoading$ = this.authState.isLoading$;\n      /**\n       * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n       * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n       */\n      this.isAuthenticated$ = this.authState.isAuthenticated$;\n      /**\n       * Emits details about the authenticated user, or null if not authenticated.\n       */\n      this.user$ = this.authState.user$;\n      /**\n       * Emits ID token claims when authenticated, or null if not authenticated.\n       */\n      this.idTokenClaims$ = this.authState.idTokenClaims$;\n      /**\n       * Emits errors that occur during login, or when checking for an active session on startup.\n       */\n      this.error$ = this.authState.error$;\n      /**\n       * Emits the value (if any) that was passed to the `loginWithRedirect` method call\n       * but only **after** `handleRedirectCallback` is first called\n       */\n      this.appState$ = this.appStateSubject$.asObservable();\n      const checkSessionOrCallback$ = isCallback => iif(() => isCallback, this.handleRedirectCallback(), defer(() => this.auth0Client.checkSession()));\n      this.shouldHandleCallback().pipe(switchMap(isCallback => checkSessionOrCallback$(isCallback).pipe(catchError(error => {\n        const config = this.configFactory.get();\n        this.navigator.navigateByUrl(config.errorPath || '/');\n        this.authState.setError(error);\n        return of(undefined);\n      }))), tap(() => {\n        this.authState.setIsLoading(false);\n      }), takeUntil(this.ngUnsubscribe$)).subscribe();\n    }\n    /**\n     * Called when the service is destroyed\n     */\n    ngOnDestroy() {\n      // https://stackoverflow.com/a/41177163\n      this.ngUnsubscribe$.next();\n      this.ngUnsubscribe$.complete();\n    }\n    /**\n     * ```js\n     * loginWithRedirect(options);\n     * ```\n     *\n     * Performs a redirect to `/authorize` using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated.\n     *\n     * @param options The login options\n     */\n    loginWithRedirect(options) {\n      return from(this.auth0Client.loginWithRedirect(options));\n    }\n    /**\n     * ```js\n     * await loginWithPopup(options);\n     * ```\n     *\n     * Opens a popup with the `/authorize` URL using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated. If the response is successful,\n     * results will be valid according to their expiration times.\n     *\n     * IMPORTANT: This method has to be called from an event handler\n     * that was started by the user like a button click, for example,\n     * otherwise the popup will be blocked in most browsers.\n     *\n     * @param options The login options\n     * @param config Configuration for the popup window\n     */\n    loginWithPopup(options, config) {\n      return from(this.auth0Client.loginWithPopup(options, config).then(() => {\n        this.authState.refresh();\n      }));\n    }\n    /**\n     * ```js\n     * logout();\n     * ```\n     *\n     * Clears the application session and performs a redirect to `/v2/logout`, using\n     * the parameters provided as arguments, to clear the Auth0 session.\n     * If the `federated` option is specified it also clears the Identity Provider session.\n     * If the `openUrl` option is set to false, it only clears the application session.\n     * It is invalid to set both the `federated` to true and `openUrl` to `false`,\n     * and an error will be thrown if you do.\n     * [Read more about how Logout works at Auth0](https://auth0.com/docs/logout).\n     *\n     * @param options The logout options\n     */\n    logout(options) {\n      return from(this.auth0Client.logout(options).then(() => {\n        if (options?.openUrl === false || options?.openUrl) {\n          this.authState.refresh();\n        }\n      }));\n    }\n    /**\n     * ```js\n     * getAccessTokenSilently(options).subscribe(token => ...)\n     * ```\n     *\n     * If there's a valid token stored, return it. Otherwise, opens an\n     * iframe with the `/authorize` URL using the parameters provided\n     * as arguments. Random and secure `state` and `nonce` parameters\n     * will be auto-generated. If the response is successful, results\n     * will be valid according to their expiration times.\n     *\n     * If refresh tokens are used, the token endpoint is called directly with the\n     * 'refresh_token' grant. If no refresh token is available to make this call,\n     * the SDK falls back to using an iframe to the '/authorize' URL.\n     *\n     * This method may use a web worker to perform the token call if the in-memory\n     * cache is used.\n     *\n     * If an `audience` value is given to this function, the SDK always falls\n     * back to using an iframe to make the token exchange.\n     *\n     * Note that in all cases, falling back to an iframe requires access to\n     * the `auth0` cookie, and thus will not work in browsers that block third-party\n     * cookies by default (Safari, Brave, etc).\n     *\n     * @param options The options for configuring the token fetch.\n     */\n    getAccessTokenSilently(options = {}) {\n      return of(this.auth0Client).pipe(concatMap(client => options.detailedResponse === true ? client.getTokenSilently({\n        ...options,\n        detailedResponse: true\n      }) : client.getTokenSilently(options)), tap(token => {\n        if (token) {\n          this.authState.setAccessToken(typeof token === 'string' ? token : token.access_token);\n        }\n      }), catchError(error => {\n        this.authState.setError(error);\n        this.authState.refresh();\n        return throwError(error);\n      }));\n    }\n    /**\n     * ```js\n     * getTokenWithPopup(options).subscribe(token => ...)\n     * ```\n     *\n     * Get an access token interactively.\n     *\n     * Opens a popup with the `/authorize` URL using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated. If the response is successful,\n     * results will be valid according to their expiration times.\n     */\n    getAccessTokenWithPopup(options) {\n      return of(this.auth0Client).pipe(concatMap(client => client.getTokenWithPopup(options)), tap(token => {\n        if (token) {\n          this.authState.setAccessToken(token);\n        }\n      }), catchError(error => {\n        this.authState.setError(error);\n        this.authState.refresh();\n        return throwError(error);\n      }));\n    }\n    /**\n     * ```js\n     * handleRedirectCallback(url).subscribe(result => ...)\n     * ```\n     *\n     * After the browser redirects back to the callback page,\n     * call `handleRedirectCallback` to handle success and error\n     * responses from Auth0. If the response is successful, results\n     * will be valid according to their expiration times.\n     *\n     * Calling this method also refreshes the authentication and user states.\n     *\n     * @param url The URL to that should be used to retrieve the `state` and `code` values. Defaults to `window.location.href` if not given.\n     */\n    handleRedirectCallback(url) {\n      return defer(() => this.auth0Client.handleRedirectCallback(url)).pipe(withLatestFrom(this.authState.isLoading$), tap(([result, isLoading]) => {\n        if (!isLoading) {\n          this.authState.refresh();\n        }\n        const appState = result?.appState;\n        const target = appState?.target ?? '/';\n        if (appState) {\n          this.appStateSubject$.next(appState);\n        }\n        this.navigator.navigateByUrl(target);\n      }), map(([result]) => result));\n    }\n    shouldHandleCallback() {\n      return of(location.search).pipe(map(search => {\n        const searchParams = new URLSearchParams(search);\n        return (searchParams.has('code') || searchParams.has('error')) && searchParams.has('state') && !this.configFactory.get().skipRedirectCallback;\n      }));\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(Auth0ClientService), i0.ɵɵinject(AuthClientConfig), i0.ɵɵinject(AbstractNavigator), i0.ɵɵinject(AuthState));\n  };\n  AuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(auth) {\n      this.auth = auth;\n    }\n    canLoad(route, segments) {\n      return this.auth.isAuthenticated$.pipe(take(1));\n    }\n    canActivate(next, state) {\n      return this.redirectIfUnauthenticated(state);\n    }\n    canActivateChild(childRoute, state) {\n      return this.redirectIfUnauthenticated(state);\n    }\n    redirectIfUnauthenticated(state) {\n      return this.auth.isAuthenticated$.pipe(tap(loggedIn => {\n        if (!loggedIn) {\n          this.auth.loginWithRedirect({\n            appState: {\n              target: state.url\n            }\n          });\n        }\n      }));\n    }\n  }\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(AuthService));\n  };\n  AuthGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AuthModule = /*#__PURE__*/(() => {\n  class AuthModule {\n    /**\n     * Initialize the authentication module system. Configuration can either be specified here,\n     * or by calling AuthClientConfig.set (perhaps from an APP_INITIALIZER factory function).\n     *\n     * @param config The optional configuration for the SDK.\n     */\n    static forRoot(config) {\n      return {\n        ngModule: AuthModule,\n        providers: [AuthService, AuthGuard, {\n          provide: AuthConfigService,\n          useValue: config\n        }, {\n          provide: Auth0ClientService,\n          useFactory: Auth0ClientFactory.createClient,\n          deps: [AuthClientConfig]\n        }]\n      };\n    }\n  }\n  AuthModule.ɵfac = function AuthModule_Factory(t) {\n    return new (t || AuthModule)();\n  };\n  AuthModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AuthModule\n  });\n  AuthModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return AuthModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst waitUntil = signal$ => source$ => source$.pipe(mergeMap(value => signal$.pipe(first(), mapTo(value))));\nlet AuthHttpInterceptor = /*#__PURE__*/(() => {\n  class AuthHttpInterceptor {\n    constructor(configFactory, auth0Client, authState, authService) {\n      this.configFactory = configFactory;\n      this.auth0Client = auth0Client;\n      this.authState = authState;\n      this.authService = authService;\n    }\n    intercept(req, next) {\n      const config = this.configFactory.get();\n      if (!config.httpInterceptor?.allowedList) {\n        return next.handle(req);\n      }\n      const isLoaded$ = this.authService.isLoading$.pipe(filter(isLoading => !isLoading));\n      return this.findMatchingRoute(req, config.httpInterceptor).pipe(concatMap(route => iif(\n      // Check if a route was matched\n      () => route !== null,\n      // If we have a matching route, call getTokenSilently and attach the token to the\n      // outgoing request\n      of(route).pipe(waitUntil(isLoaded$), pluck('tokenOptions'), concatMap(options => this.getAccessTokenSilently(options).pipe(catchError(err => {\n        if (this.allowAnonymous(route, err)) {\n          return of('');\n        }\n        this.authState.setError(err);\n        return throwError(err);\n      }))), switchMap(token => {\n        // Clone the request and attach the bearer token\n        const clone = token ? req.clone({\n          headers: req.headers.set('Authorization', `Bearer ${token}`)\n        }) : req;\n        return next.handle(clone);\n      })),\n      // If the URI being called was not found in our httpInterceptor config, simply\n      // pass the request through without attaching a token\n      next.handle(req))));\n    }\n    /**\n     * Duplicate of AuthService.getAccessTokenSilently, but with a slightly different error handling.\n     * Only used internally in the interceptor.\n     *\n     * @param options The options for configuring the token fetch.\n     */\n    getAccessTokenSilently(options) {\n      return of(this.auth0Client).pipe(concatMap(client => client.getTokenSilently(options)), tap(token => this.authState.setAccessToken(token)), catchError(error => {\n        this.authState.refresh();\n        return throwError(error);\n      }));\n    }\n    /**\n     * Strips the query and fragment from the given uri\n     *\n     * @param uri The uri to remove the query and fragment from\n     */\n    stripQueryFrom(uri) {\n      if (uri.indexOf('?') > -1) {\n        uri = uri.substr(0, uri.indexOf('?'));\n      }\n      if (uri.indexOf('#') > -1) {\n        uri = uri.substr(0, uri.indexOf('#'));\n      }\n      return uri;\n    }\n    /**\n     * Determines whether the specified route can have an access token attached to it, based on matching the HTTP request against\n     * the interceptor route configuration.\n     *\n     * @param route The route to test\n     * @param request The HTTP request\n     */\n    canAttachToken(route, request) {\n      const testPrimitive = value => {\n        if (!value) {\n          return false;\n        }\n        const requestPath = this.stripQueryFrom(request.url);\n        if (value === requestPath) {\n          return true;\n        }\n        // If the URL ends with an asterisk, match using startsWith.\n        return value.indexOf('*') === value.length - 1 && request.url.startsWith(value.substr(0, value.length - 1));\n      };\n      if (isHttpInterceptorRouteConfig(route)) {\n        if (route.httpMethod && route.httpMethod !== request.method) {\n          return false;\n        }\n        /* istanbul ignore if */\n        if (!route.uri && !route.uriMatcher) {\n          console.warn('Either a uri or uriMatcher is required when configuring the HTTP interceptor.');\n        }\n        return route.uriMatcher ? route.uriMatcher(request.url) : testPrimitive(route.uri);\n      }\n      return testPrimitive(route);\n    }\n    /**\n     * Tries to match a route from the SDK configuration to the HTTP request.\n     * If a match is found, the route configuration is returned.\n     *\n     * @param request The Http request\n     * @param config HttpInterceptorConfig\n     */\n    findMatchingRoute(request, config) {\n      return from(config.allowedList).pipe(first(route => this.canAttachToken(route, request), null));\n    }\n    allowAnonymous(route, err) {\n      return !!route && isHttpInterceptorRouteConfig(route) && !!route.allowAnonymous && ['login_required', 'consent_required', 'missing_refresh_token'].includes(err.error);\n    }\n  }\n  AuthHttpInterceptor.ɵfac = function AuthHttpInterceptor_Factory(t) {\n    return new (t || AuthHttpInterceptor)(i0.ɵɵinject(AuthClientConfig), i0.ɵɵinject(Auth0ClientService), i0.ɵɵinject(AuthState), i0.ɵɵinject(AuthService));\n  };\n  AuthHttpInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AuthHttpInterceptor,\n    factory: AuthHttpInterceptor.ɵfac\n  });\n  return AuthHttpInterceptor;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Initialize the authentication system. Configuration can either be specified here,\n * or by calling AuthClientConfig.set (perhaps from an APP_INITIALIZER factory function).\n *\n * Note: Should only be used as of Angular 15, and should not be added to a component's providers.\n *\n * @param config The optional configuration for the SDK.\n *\n * @example\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideAuth0(),\n *   ],\n * });\n */\nfunction provideAuth0(config) {\n  return [AuthService, AuthHttpInterceptor, AuthGuard, {\n    provide: AuthConfigService,\n    useValue: config\n  }, {\n    provide: Auth0ClientService,\n    useFactory: Auth0ClientFactory.createClient,\n    deps: [AuthClientConfig]\n  }];\n}\n\n/**\n * Functional AuthGuard to ensure routes can only be accessed when authenticated.\n *\n * Note: Should only be used as of Angular 15\n *\n * @param route Contains the information about a route associated with a component loaded in an outlet at a particular moment in time.\n * @param state Represents the state of the router at a moment in time.\n * @returns An Observable, indicating if the route can be accessed or not\n */\nconst authGuardFn = (route, state) => inject(AuthGuard).canActivate(route, state);\n/**\n * Functional AuthHttpInterceptor to include the access token in matching requests.\n *\n * Note: Should only be used as of Angular 15\n *\n * @param req An outgoing HTTP request with an optional typed body.\n * @param handle Represents the next interceptor in an interceptor chain, or the real backend if there are no\n * further interceptors.\n * @returns An Observable representing the intercepted HttpRequest\n */\nconst authHttpInterceptorFn = (req, handle) => inject(AuthHttpInterceptor).intercept(req, {\n  handle\n});\n\n/*\n * Public API Surface of auth0-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth0ClientFactory, Auth0ClientService, AuthClientConfig, AuthConfigService, AuthGuard, AuthHttpInterceptor, AuthModule, AuthService, AuthState, authGuardFn, authHttpInterceptorFn, isHttpInterceptorRouteConfig, provideAuth0 };\n//# sourceMappingURL=auth0-auth0-angular.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}