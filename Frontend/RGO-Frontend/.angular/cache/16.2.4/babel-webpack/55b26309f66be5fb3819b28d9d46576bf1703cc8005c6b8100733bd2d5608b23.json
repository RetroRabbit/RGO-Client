{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/charts.service\";\nimport * as i2 from \"ng-angular-popup\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-cookie-service\";\nfunction CreateChartsComponent_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r1);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    data: a0,\n    label: a1\n  };\n};\nconst _c1 = function (a0) {\n  return [a0];\n};\nexport let CreateChartsComponent = /*#__PURE__*/(() => {\n  class CreateChartsComponent {\n    constructor(ChartService, toast, router, cookieService) {\n      this.ChartService = ChartService;\n      this.toast = toast;\n      this.router = router;\n      this.cookieService = cookieService;\n      this.selectedItem = new EventEmitter();\n      this.chartName = 'Name';\n      this.chartDataItem = 'Gender';\n      this.chartType = 'bar';\n      this.chartData = [];\n      this.chartLabels = [];\n      this.chartOptions = {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      };\n      this.columns = [];\n    }\n    ngOnInit() {\n      this.getChartData();\n      this.ChartService.getColumns().subscribe(options => {\n        this.columns = options;\n      });\n    }\n    createChart() {\n      this.ChartService.createChart(this.chartDataItem, this.chartName, this.chartType).subscribe(response => {\n        this.toast.success({\n          detail: \"Success\",\n          summary: 'Chart created',\n          duration: 5000,\n          position: 'topRight'\n        });\n        this.cookieService.set('currentPage', \"Charts\");\n      }, error => {\n        this.toast.error({\n          detail: \"Error\",\n          summary: \"Failed to create chart.\",\n          duration: 5000,\n          position: 'topRight'\n        });\n      });\n    }\n    getChartData() {\n      this.ChartService.getChartDataByType(this.chartDataItem).subscribe(data => {\n        this.chartData = data.data;\n        this.chartLabels = data.labels;\n      }, error => {\n        this.toast.error({\n          detail: \"Error\",\n          summary: \"Failed to get chartData.\",\n          duration: 5000,\n          position: 'topRight'\n        });\n      });\n    }\n    onDropDownChange() {\n      this.ChartService.getChartDataByType(this.chartDataItem).subscribe(data => {\n        this.chartData = data.data;\n        this.chartLabels = data.labels;\n      }, error => {\n        this.toast.error({\n          detail: \"Error\",\n          summary: \"Failed to get chartData.\",\n          duration: 5000,\n          position: 'topRight'\n        });\n      });\n    }\n    CaptureEvent(event) {\n      const target = event.target;\n      this.cookieService.set('currentPage', target.innerText);\n    }\n    static #_ = this.ɵfac = function CreateChartsComponent_Factory(t) {\n      return new (t || CreateChartsComponent)(i0.ɵɵdirectiveInject(i1.ChartService), i0.ɵɵdirectiveInject(i2.NgToastService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.CookieService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CreateChartsComponent,\n      selectors: [[\"app-create-charts\"]],\n      outputs: {\n        selectedItem: \"selectedItem\"\n      },\n      decls: 28,\n      vars: 13,\n      consts: [[1, \"container\"], [1, \"chart-form\"], [\"for\", \"chartType\"], [\"id\", \"chartType\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"bar\"], [\"value\", \"line\"], [\"value\", \"pie\"], [\"value\", \"doughnut\"], [\"for\", \"chartData\"], [\"type\", \"text\", \"id\", \"chartData\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"chartData\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"chart-container\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"type\", \"options\"], [1, \"create-button\", 3, \"click\"], [3, \"value\"]],\n      template: function CreateChartsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Create a Chart\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n          i0.ɵɵtext(5, \"Chart Type:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"select\", 3);\n          i0.ɵɵlistener(\"ngModelChange\", function CreateChartsComponent_Template_select_ngModelChange_6_listener($event) {\n            return ctx.chartType = $event;\n          });\n          i0.ɵɵelementStart(7, \"option\", 4);\n          i0.ɵɵtext(8, \"Bar Chart\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"option\", 5);\n          i0.ɵɵtext(10, \"Line Chart\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"option\", 6);\n          i0.ɵɵtext(12, \"Pie Chart\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"option\", 7);\n          i0.ɵɵtext(14, \"Doughnut\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(15, \"div\", 1)(16, \"label\", 8);\n          i0.ɵɵtext(17, \"Chart Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function CreateChartsComponent_Template_input_ngModelChange_18_listener($event) {\n            return ctx.chartName = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"div\", 1)(20, \"label\", 8);\n          i0.ɵɵtext(21, \"Chart Data Item:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"select\", 10);\n          i0.ɵɵlistener(\"ngModelChange\", function CreateChartsComponent_Template_select_ngModelChange_22_listener($event) {\n            return ctx.chartDataItem = $event;\n          })(\"change\", function CreateChartsComponent_Template_select_change_22_listener() {\n            return ctx.onDropDownChange();\n          });\n          i0.ɵɵtemplate(23, CreateChartsComponent_option_23_Template, 2, 2, \"option\", 11);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(24, \"div\", 12);\n          i0.ɵɵelement(25, \"canvas\", 13);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"button\", 14);\n          i0.ɵɵlistener(\"click\", function CreateChartsComponent_Template_button_click_26_listener() {\n            return ctx.createChart();\n          });\n          i0.ɵɵtext(27, \"Create Chart\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngModel\", ctx.chartType);\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"ngModel\", ctx.chartName);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.chartDataItem);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.columns);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"datasets\", i0.ɵɵpureFunction1(11, _c1, i0.ɵɵpureFunction2(8, _c0, ctx.chartData, ctx.chartName)))(\"labels\", ctx.chartLabels)(\"type\", ctx.chartType)(\"options\", ctx.chartOptions);\n        }\n      },\n      styles: [\".chart-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:left;padding:20px}.container[_ngcontent-%COMP%]{background-color:#fff;margin:0 auto;padding:20px;border-radius:8px;box-shadow:0 4px 6px #0000001a;width:min-content}.chart-form[_ngcontent-%COMP%]{background-color:#f0f0f0;padding:20px;border-radius:5px;box-shadow:0 0 10px #0003;margin-bottom:20px;width:max-content}.chart-form[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-weight:700}.chart-form[_ngcontent-%COMP%]   select[_ngcontent-%COMP%], .chart-form[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%]{width:100%;padding:10px;margin:8px 0;border:1px solid #ccc;border-radius:4px;box-sizing:border-box}.chart-button[_ngcontent-%COMP%]{background-color:#007bff;color:#fff;border:none;border-radius:4px;padding:10px 20px;cursor:pointer;font-weight:700}.chart-button[_ngcontent-%COMP%]:hover{background-color:#0056b3}.chart-container[_ngcontent-%COMP%]{max-width:500px;max-height:500px}.chart-container[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{max-width:-moz-fit-content;max-width:fit-content;height:-moz-fit-content;height:fit-content}.edit-button[_ngcontent-%COMP%], .create-button[_ngcontent-%COMP%], .save-button[_ngcontent-%COMP%], .cancel-button[_ngcontent-%COMP%]{background-color:#48a648;color:#fff;border:none;padding:8px 16px;border-radius:4px;cursor:pointer;transition:background-color .3s;margin-left:40%}.edit-button[_ngcontent-%COMP%]:hover, .create-button[_ngcontent-%COMP%], .save-button[_ngcontent-%COMP%]:hover, .cancel-button[_ngcontent-%COMP%]:hover{background-color:#397f39}h2[_ngcontent-%COMP%]{margin-left:25%}@media screen and (min-width: 768px){.chart-container[_ngcontent-%COMP%]{flex-direction:row;justify-content:space-between}.chart-form[_ngcontent-%COMP%]{flex:0 1 45%}.chart-container[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{flex:0 1 45%;height:400px}}\"]\n    });\n  }\n  return CreateChartsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}