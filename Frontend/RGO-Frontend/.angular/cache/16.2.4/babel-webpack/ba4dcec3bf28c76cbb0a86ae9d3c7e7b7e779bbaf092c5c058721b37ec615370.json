{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/charts.service\";\nimport * as i2 from \"ngx-cookie-service\";\nfunction ChartComponent_div_9_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function ChartComponent_div_9_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.generateReport());\n    });\n    i0.ɵɵtext(1, \"Generate Report\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    data: a0,\n    label: a1\n  };\n};\nconst _c1 = function (a0) {\n  return [a0];\n};\nfunction ChartComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"div\", 10);\n    i0.ɵɵelement(2, \"canvas\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 12)(4, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ChartComponent_div_9_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.clearActiveChart());\n    });\n    i0.ɵɵtext(5, \"Back to Dashboard\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, ChartComponent_div_9_button_6_Template, 2, 0, \"button\", 14);\n    i0.ɵɵelementStart(7, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function ChartComponent_div_9_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.openUpdateForm());\n    });\n    i0.ɵɵtext(8, \"Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function ChartComponent_div_9_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.deleteChart(ctx_r10.activeChart.id));\n    });\n    i0.ɵɵtext(10, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"datasets\", i0.ɵɵpureFunction1(8, _c1, i0.ɵɵpureFunction2(5, _c0, ctx_r0.activeChart.data, ctx_r0.activeChart.name)))(\"labels\", ctx_r0.activeChart.labels)(\"options\", ctx_r0.activeChart.labels)(\"type\", ctx_r0.activeChart.type);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.showReport);\n  }\n}\nfunction ChartComponent_app_report_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-report\", 18);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"chartData\", ctx_r1.activeChart);\n  }\n}\nfunction ChartComponent_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵlistener(\"click\", function ChartComponent_div_11_div_1_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const chart_r12 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onChartClick(chart_r12));\n    });\n    i0.ɵɵelement(1, \"canvas\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const chart_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"datasets\", i0.ɵɵpureFunction1(7, _c1, i0.ɵɵpureFunction2(4, _c0, chart_r12.data, chart_r12.name)))(\"labels\", chart_r12.labels)(\"options\", chart_r12.labels)(\"type\", chart_r12.type);\n  }\n}\nfunction ChartComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, ChartComponent_div_11_div_1_Template, 2, 9, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.chartData);\n  }\n}\nfunction ChartComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"h3\");\n    i0.ɵɵtext(2, \"Update Chart\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 23);\n    i0.ɵɵlistener(\"submit\", function ChartComponent_div_12_Template_form_submit_3_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.updateChart());\n    });\n    i0.ɵɵelementStart(4, \"label\", 24);\n    i0.ɵɵtext(5, \"Chart Name:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"input\", 25);\n    i0.ɵɵlistener(\"ngModelChange\", function ChartComponent_div_12_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.updateFormData.Name = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 12)(8, \"label\", 26);\n    i0.ɵɵtext(9, \"Chart Type:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"select\", 27);\n    i0.ɵɵlistener(\"ngModelChange\", function ChartComponent_div_12_Template_select_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateFormData.Type = $event);\n    });\n    i0.ɵɵelementStart(11, \"option\", 28);\n    i0.ɵɵtext(12, \"Bar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"option\", 29);\n    i0.ɵɵtext(14, \"Line\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"option\", 30);\n    i0.ɵɵtext(16, \"Pie\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"option\", 31);\n    i0.ɵɵtext(18, \"Doughnut\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"button\", 32);\n    i0.ɵɵtext(20, \"Update Chart\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 33);\n    i0.ɵɵlistener(\"click\", function ChartComponent_div_12_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.showUpdateForm = false);\n    });\n    i0.ɵɵtext(22, \"Cancel\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.updateFormData.Name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.updateFormData.Type);\n  }\n}\nexport let ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor(chartService, cookieService) {\n      this.chartService = chartService;\n      this.cookieService = cookieService;\n      this.selectedItem = new EventEmitter();\n      this.selectedChartType = 'bar';\n      this.displayChart = false;\n      this.numberOfEmployees = 0;\n      this.chartData = [];\n      this.activeChart = null;\n      this.showReport = false;\n      this.showUpdateForm = false;\n      this.updateFormData = {\n        Name: '',\n        Type: ''\n      };\n    }\n    ngOnInit() {\n      this.createAndDisplayChart();\n      this.getNumberOfEmployees();\n    }\n    createAndDisplayChart() {\n      this.chartService.getAllCharts().subscribe(data => {\n        this.processChartData(data);\n      }, error => {});\n    }\n    getNumberOfEmployees() {\n      this.chartService.getTotalEmployees().subscribe(data => {\n        this.numberOfEmployees = data;\n      }, error => {});\n    }\n    processChartData(data) {\n      if (data.length > 0) {\n        this.chartData = data;\n        this.displayChart = true;\n        this.selectedChartType = this.chartData[0].type;\n      } else {\n        this.chartData = [];\n        this.displayChart = false;\n      }\n    }\n    updateChartType(chartType) {\n      this.selectedChartType = chartType;\n    }\n    onChartClick(chart) {\n      this.activeChart = chart;\n    }\n    clearActiveChart() {\n      this.activeChart = null;\n      this.showReport = false;\n    }\n    generateReport() {\n      if (this.activeChart) {\n        this.showReport = true;\n      }\n    }\n    openUpdateForm() {\n      if (this.activeChart) {\n        this.updateFormData = {\n          ...this.activeChart\n        };\n        this.showUpdateForm = true;\n      }\n    }\n    updateChart() {\n      if (this.activeChart) {\n        const updatedChart = {\n          ...this.activeChart,\n          Name: this.updateFormData.Name,\n          Type: this.updateFormData.Type\n        };\n        this.chartService.updateChart(updatedChart).subscribe(updatedData => {\n          const index = this.chartData.findIndex(c => c.id === updatedData.Id);\n          if (index !== -1) {\n            this.chartData[index] = updatedData;\n          }\n          this.showUpdateForm = false;\n          this.activeChart = null;\n          this.createAndDisplayChart();\n          if (this.selectedChartType !== updatedData.Type) {\n            this.selectedChartType = updatedData.Type;\n          }\n        }, error => {});\n      }\n    }\n    deleteChart(chartId) {\n      if (this.activeChart) {\n        this.chartService.deleteChart(chartId).subscribe(() => {\n          const index = this.chartData.findIndex(c => c.id === chartId);\n          if (index !== -1) {\n            this.chartData.splice(index, 1);\n          }\n          this.clearActiveChart();\n        }, error => {});\n      }\n    }\n    CaptureEvent(event) {\n      const target = event.target;\n      this.cookieService.set('currentPage', target.innerText);\n    }\n    static #_ = this.ɵfac = function ChartComponent_Factory(t) {\n      return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i1.ChartService), i0.ɵɵdirectiveInject(i2.CookieService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChartComponent,\n      selectors: [[\"app-chart\"]],\n      outputs: {\n        selectedItem: \"selectedItem\"\n      },\n      decls: 13,\n      vars: 5,\n      consts: [[1, \"charts-wrapper\"], [\"data-color\", \"danger\", \"data-background-color\", \"white\", \"data-image\", \"./assets/img/sidebar-1.jpg\", 1, \"sidebar\"], [1, \"sidebar-background\", 2, \"background-image\", \"url(./assets/img/sidebar-4.jpg)\"], [\"type\", \"button\", 1, \"edit-button\", 3, \"click\"], [1, \"numberofempoyees\"], [\"class\", \"chart-wrapper\", 4, \"ngIf\"], [3, \"chartData\", 4, \"ngIf\"], [\"class\", \"chart-container\", 4, \"ngIf\"], [\"class\", \"update-form\", 4, \"ngIf\"], [1, \"chart-wrapper\"], [1, \"chart-item\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"type\"], [1, \"report-controls\"], [1, \"back-button\", 3, \"click\"], [\"class\", \"generate-report-button\", 3, \"click\", 4, \"ngIf\"], [1, \"update-button\", 3, \"click\"], [1, \"delete-button\", 3, \"click\"], [1, \"generate-report-button\", 3, \"click\"], [3, \"chartData\"], [1, \"chart-container\"], [\"class\", \"chart-item\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"chart-item\", 3, \"click\"], [1, \"update-form\"], [3, \"submit\"], [\"for\", \"Name\"], [\"type\", \"text\", \"id\", \"Name\", \"name\", \"Name\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"chartType\"], [\"id\", \"chartType\", \"name\", \"chartType\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"bar\"], [\"value\", \"line\"], [\"value\", \"pie\"], [\"value\", \"doughnut\"], [\"type\", \"submit\", 1, \"update-button\"], [\"type\", \"button\", 1, \"cancel-button\", 3, \"click\"]],\n      template: function ChartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵelement(2, \"app-sidebar\")(3, \"div\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function ChartComponent_Template_button_click_4_listener($event) {\n            return ctx.CaptureEvent($event);\n          });\n          i0.ɵɵtext(5, \"Edit Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 4)(7, \"h5\");\n          i0.ɵɵtext(8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(9, ChartComponent_div_9_Template, 11, 10, \"div\", 5);\n          i0.ɵɵtemplate(10, ChartComponent_app_report_10_Template, 1, 1, \"app-report\", 6);\n          i0.ɵɵtemplate(11, ChartComponent_div_11_Template, 2, 1, \"div\", 7);\n          i0.ɵɵtemplate(12, ChartComponent_div_12_Template, 23, 2, \"div\", 8);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵtextInterpolate1(\"Total number of employees: \", ctx.numberOfEmployees, \"\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.activeChart);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showReport);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.activeChart);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.showUpdateForm);\n        }\n      },\n      styles: [\".charts-wrapper[_ngcontent-%COMP%]{display:flex;align-items:center;height:-moz-fit-content;height:fit-content;flex-direction:column;margin-top:20px}.chart-container[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;gap:20px;margin-top:20px;margin-left:20px;padding-left:20px}.chart-item[_ngcontent-%COMP%]{width:300px;height:300px;margin:10px;padding:20px;background-color:#fff;border:1px solid #ddd;text-align:center;cursor:pointer;display:inline-block;border-radius:10px;box-shadow:0 2px 4px #0000001a;transition:transform .3s ease-in-out}.chart-item[_ngcontent-%COMP%]:hover{transform:scale(1.05)}.chart-item.active[_ngcontent-%COMP%]{transform:scale(1.05);z-index:1}.chart-container[_ngcontent-%COMP%]   .chart.item[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{max-width:-moz-fit-content;max-width:fit-content;height:-moz-fit-content;height:fit-content}.edit-button[_ngcontent-%COMP%], .save-button[_ngcontent-%COMP%], .cancel-button[_ngcontent-%COMP%]{background-color:#48a648;color:#fff;border:none;padding:8px 16px;border-radius:4px;cursor:pointer;transition:background-color .3s}.edit-button[_ngcontent-%COMP%]:hover, .save-button[_ngcontent-%COMP%]:hover, .cancel-button[_ngcontent-%COMP%]:hover{background-color:#397f39}h5[_ngcontent-%COMP%]{margin-top:20px}\"]\n    });\n  }\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}