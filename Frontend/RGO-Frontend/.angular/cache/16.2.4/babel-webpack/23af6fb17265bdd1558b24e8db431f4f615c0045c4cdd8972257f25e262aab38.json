{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { statuses } from 'src/app/models/constants/statuses.constants';\nimport { dataTypes } from 'src/app/models/constants/types.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/field-code.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"ng-angular-popup\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../header/header.component\";\nimport * as i6 from \"../sidebar/sidebar.component\";\nfunction NewFieldCodeComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 33);\n    i0.ɵɵtext(1, \"Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NewFieldCodeComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 33);\n    i0.ɵɵtext(1, \"Field with this name already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NewFieldCodeComponent_small_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 33);\n    i0.ɵɵtext(1, \"Code is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NewFieldCodeComponent_option_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", status_r8.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", status_r8.value, \" \");\n  }\n}\nfunction NewFieldCodeComponent_small_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 33);\n    i0.ɵɵtext(1, \"Status is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NewFieldCodeComponent_option_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r9.value, \" \");\n  }\n}\nfunction NewFieldCodeComponent_small_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 33);\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NewFieldCodeComponent_div_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"label\", 35);\n    i0.ɵɵtext(2, \"Option\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 36);\n    i0.ɵɵelementEnd();\n  }\n}\nexport class NewFieldCodeComponent {\n  constructor(fieldCodeService, fb, toast) {\n    this.fieldCodeService = fieldCodeService;\n    this.fb = fb;\n    this.toast = toast;\n    this.statuses = statuses;\n    this.dataTypes = dataTypes;\n    this.isUnique = true;\n    this.initializeForm();\n  }\n  ngOnInit() {\n    this.fieldCodeService.getAllFieldCodes().subscribe({\n      next: fieldCodes => {\n        this.fieldCodes = fieldCodes;\n      },\n      error: error => {}\n    });\n  }\n  initializeForm() {\n    this.newFieldCodeForm = this.fb.group({\n      fieldCode: this.fb.group({\n        code: ['', Validators.required],\n        name: ['', [Validators.required]],\n        description: [''],\n        regex: [''],\n        type: ['', Validators.required],\n        status: ['', Validators.required],\n        option: [''],\n        internal: [false],\n        internalTable: [''],\n        options: this.fb.array([])\n      })\n    });\n    this.isUnique = true;\n  }\n  onSubmit() {\n    if (this.newFieldCodeForm.valid) {\n      const {\n        fieldCode\n      } = this.newFieldCodeForm.value;\n      const optionValue = fieldCode.option;\n      const fieldCodeDto = {\n        id: 0,\n        code: fieldCode.code,\n        name: fieldCode.name,\n        description: fieldCode.description,\n        regex: fieldCode.regex,\n        type: parseInt(fieldCode.type),\n        status: parseInt(fieldCode.status),\n        internal: fieldCode.internal,\n        internalTable: fieldCode.internalTable,\n        options: optionValue != \"\" ? [{\n          id: 0,\n          fieldCodeId: 0,\n          option: optionValue\n        }] : []\n      };\n      this.fieldCodeService.saveFieldCode(fieldCodeDto).subscribe({\n        next: data => {\n          this.toast.success({\n            detail: \"Field Code saved!\",\n            position: 'topRight'\n          });\n          this.newFieldCodeForm.disable();\n        },\n        error: error => {\n          if (error.error === \"Field with that name found\") {\n            this.isUnique = false;\n          } else {\n            this.toast.error({\n              detail: \"Error\",\n              summary: error,\n              duration: 5000,\n              position: 'topRight'\n            });\n          }\n        }\n      });\n    }\n  }\n  static #_ = this.ɵfac = function NewFieldCodeComponent_Factory(t) {\n    return new (t || NewFieldCodeComponent)(i0.ɵɵdirectiveInject(i1.FieldCodeService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.NgToastService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NewFieldCodeComponent,\n    selectors: [[\"app-new-field-code\"]],\n    decls: 58,\n    vars: 11,\n    consts: [[1, \"wrapper\"], [\"data-color\", \"danger\", \"data-background-color\", \"white\", \"data-image\", \"./assets/img/sidebar-1.jpg\", 1, \"sidebar\"], [1, \"sidebar-background\", 2, \"background-image\", \"url(./assets/img/sidebar-4.jpg)\"], [1, \"main-panel\"], [1, \"m-3\", \"border-bottom\"], [1, \"page-heading\", \"border-bottom\"], [2, \"overflow\", \"auto\"], [1, \"container-fluid\"], [3, \"formGroup\", \"submit\"], [1, \"row\"], [1, \"col-sm-6\"], [\"formGroupName\", \"fieldCode\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"code\", 1, \"form-label\"], [\"id\", \"code\", \"type\", \"text\", \"formControlName\", \"code\", 1, \"form-control\"], [\"for\", \"description\", 1, \"form-label\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", 1, \"form-control\"], [\"for\", \"regex\", 1, \"form-label\"], [\"id\", \"regex\", \"type\", \"text\", \"formControlName\", \"regex\", 1, \"form-control\"], [\"for\", \"status\", 1, \"form-label\"], [\"id\", \"status\", \"formControlName\", \"status\", 1, \"form-select\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"type\", 1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"type\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"mb-3\", 4, \"ngIf\"], [\"id\", \"internal\", \"type\", \"checkbox\", \"formControlName\", \"internal\", 1, \"form-check-input\"], [\"for\", \"internal\", 1, \"form-check-label\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"href\", \"/home\"], [1, \"btn\", \"btn-primary\"], [1, \"text-danger\"], [3, \"value\"], [\"for\", \"option\", 1, \"form-label\"], [\"id\", \"option\", \"type\", \"text\", \"formControlName\", \"option\", 1, \"form-control\"]],\n    template: function NewFieldCodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"app-sidebar\")(3, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelement(5, \"app-header\");\n        i0.ɵɵelementStart(6, \"div\", 4)(7, \"h1\", 5);\n        i0.ɵɵtext(8, \" New Field Code\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7)(11, \"form\", 8);\n        i0.ɵɵlistener(\"submit\", function NewFieldCodeComponent_Template_form_submit_11_listener($event) {\n          ctx.onSubmit();\n          return $event.preventDefault();\n        });\n        i0.ɵɵelementStart(12, \"div\", 9)(13, \"div\", 10)(14, \"div\", 11)(15, \"div\", 12)(16, \"label\", 13);\n        i0.ɵɵtext(17, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, NewFieldCodeComponent_small_19_Template, 2, 0, \"small\", 15);\n        i0.ɵɵtemplate(20, NewFieldCodeComponent_small_20_Template, 2, 0, \"small\", 15);\n        i0.ɵɵelementStart(21, \"div\", 12)(22, \"label\", 16);\n        i0.ɵɵtext(23, \"Code\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"input\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, NewFieldCodeComponent_small_25_Template, 2, 0, \"small\", 15);\n        i0.ɵɵelementStart(26, \"div\", 12)(27, \"label\", 18);\n        i0.ɵɵtext(28, \"Description (optional)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"input\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"div\", 12)(31, \"label\", 20);\n        i0.ɵɵtext(32, \"RegEx (optional)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(33, \"input\", 21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"div\", 12)(35, \"label\", 22);\n        i0.ɵɵtext(36, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"select\", 23);\n        i0.ɵɵtemplate(38, NewFieldCodeComponent_option_38_Template, 2, 2, \"option\", 24);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(39, NewFieldCodeComponent_small_39_Template, 2, 0, \"small\", 15);\n        i0.ɵɵelementStart(40, \"div\", 12)(41, \"label\", 25);\n        i0.ɵɵtext(42, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"select\", 26);\n        i0.ɵɵlistener(\"ngModelChange\", function NewFieldCodeComponent_Template_select_ngModelChange_43_listener($event) {\n          return ctx.selectedType = $event;\n        });\n        i0.ɵɵtemplate(44, NewFieldCodeComponent_option_44_Template, 2, 2, \"option\", 24);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(45, NewFieldCodeComponent_small_45_Template, 2, 0, \"small\", 15);\n        i0.ɵɵtemplate(46, NewFieldCodeComponent_div_46_Template, 4, 0, \"div\", 27);\n        i0.ɵɵelementStart(47, \"div\", 12);\n        i0.ɵɵelement(48, \"input\", 28);\n        i0.ɵɵelementStart(49, \"label\", 29);\n        i0.ɵɵtext(50, \"Internal\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(51, \"div\", 12)(52, \"button\", 30);\n        i0.ɵɵtext(53, \"Submit\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(54, \"div\", 12)(55, \"a\", 31)(56, \"button\", 32);\n        i0.ɵɵtext(57, \"Back\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        let tmp_3_0;\n        let tmp_5_0;\n        let tmp_8_0;\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"formGroup\", ctx.newFieldCodeForm);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", (ctx.newFieldCodeForm == null ? null : (tmp_1_0 = ctx.newFieldCodeForm.get(\"fieldCode.name\")) == null ? null : tmp_1_0.dirty) && ctx.newFieldCodeForm.hasError(\"required\", \"fieldCode.name\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isUnique && !ctx.newFieldCodeForm.hasError(\"required\", \"fieldCode.name\") && (ctx.newFieldCodeForm == null ? null : (tmp_2_0 = ctx.newFieldCodeForm.get(\"fieldCode.name\")) == null ? null : tmp_2_0.dirty));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", (ctx.newFieldCodeForm == null ? null : (tmp_3_0 = ctx.newFieldCodeForm.get(\"fieldCode.code\")) == null ? null : tmp_3_0.dirty) && ctx.newFieldCodeForm.hasError(\"required\", \"fieldCode.code\"));\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngForOf\", ctx.statuses);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.newFieldCodeForm == null ? null : (tmp_5_0 = ctx.newFieldCodeForm.get(\"fieldCode.status\")) == null ? null : tmp_5_0.touched) && ctx.newFieldCodeForm.hasError(\"required\", \"fieldCode.status\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.selectedType);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.dataTypes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.newFieldCodeForm == null ? null : (tmp_8_0 = ctx.newFieldCodeForm.get(\"fieldCode.type\")) == null ? null : tmp_8_0.touched) && ctx.newFieldCodeForm.hasError(\"required\", \"fieldCode.type\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedType == 4);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"disabled\", !ctx.newFieldCodeForm.valid);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i2.FormGroupName, i5.HeaderComponent, i6.SidebarComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","statuses","dataTypes","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","status_r8","id","ɵɵadvance","ɵɵtextInterpolate1","value","type_r9","ɵɵelement","NewFieldCodeComponent","constructor","fieldCodeService","fb","toast","isUnique","initializeForm","ngOnInit","getAllFieldCodes","subscribe","next","fieldCodes","error","newFieldCodeForm","group","fieldCode","code","required","name","description","regex","type","status","option","internal","internalTable","options","array","onSubmit","valid","optionValue","fieldCodeDto","parseInt","fieldCodeId","saveFieldCode","data","success","detail","position","disable","summary","duration","_","ɵɵdirectiveInject","i1","FieldCodeService","i2","FormBuilder","i3","NgToastService","_2","selectors","decls","vars","consts","template","NewFieldCodeComponent_Template","rf","ctx","ɵɵlistener","NewFieldCodeComponent_Template_form_submit_11_listener","$event","preventDefault","ɵɵtemplate","NewFieldCodeComponent_small_19_Template","NewFieldCodeComponent_small_20_Template","NewFieldCodeComponent_small_25_Template","NewFieldCodeComponent_option_38_Template","NewFieldCodeComponent_small_39_Template","NewFieldCodeComponent_Template_select_ngModelChange_43_listener","selectedType","NewFieldCodeComponent_option_44_Template","NewFieldCodeComponent_small_45_Template","NewFieldCodeComponent_div_46_Template","tmp_1_0","get","dirty","hasError","tmp_2_0","tmp_3_0","tmp_5_0","touched","tmp_8_0"],"sources":["C:\\Users\\HP\\Desktop\\GOP\\RGO-Client\\Frontend\\RGO-Frontend\\src\\app\\components\\new-field-code\\new-field-code.component.ts","C:\\Users\\HP\\Desktop\\GOP\\RGO-Client\\Frontend\\RGO-Frontend\\src\\app\\components\\new-field-code\\new-field-code.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { NgToastService } from 'ng-angular-popup';\r\nimport { statuses } from 'src/app/models/constants/statuses.constants';\r\nimport { dataTypes } from 'src/app/models/constants/types.constants';\r\nimport { FieldCode } from 'src/app/models/field-code.interface';\r\nimport { FieldCodeService } from 'src/app/services/field-code.service';\r\n\r\n@Component({\r\n  selector: 'app-new-field-code',\r\n  templateUrl: './new-field-code.component.html',\r\n  styleUrls: ['./new-field-code.component.css']\r\n})\r\nexport class NewFieldCodeComponent {\r\n\r\n  public statuses = statuses;\r\n  public dataTypes = dataTypes;\r\n  selectedType: any;\r\n  newFieldCodeForm!: FormGroup;\r\n  fieldCodes?: FieldCode[];\r\n  isUnique?: boolean = true;\r\n\r\n  constructor(\r\n    private fieldCodeService: FieldCodeService,\r\n    private fb: FormBuilder,\r\n    private toast: NgToastService) {\r\n    this.initializeForm();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fieldCodeService.getAllFieldCodes().subscribe({\r\n      next: fieldCodes => {\r\n        this.fieldCodes = fieldCodes;\r\n      },\r\n      error: error => {\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeForm() {\r\n    this.newFieldCodeForm = this.fb.group({\r\n      fieldCode: this.fb.group({\r\n        code: ['', Validators.required],\r\n        name: ['', [Validators.required]],\r\n        description: [''],\r\n        regex: [''],\r\n        type: ['', Validators.required],\r\n        status: ['', Validators.required],\r\n        option: [''],\r\n        internal: [false],\r\n        internalTable: [''],\r\n        options: this.fb.array([]) \r\n      }),\r\n    });\r\n    this.isUnique = true;\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.newFieldCodeForm.valid) {\r\n      const { fieldCode } = this.newFieldCodeForm.value;\r\n      const optionValue = fieldCode.option;\r\n      const fieldCodeDto = {\r\n        id: 0,\r\n        code: fieldCode.code,\r\n        name: fieldCode.name,\r\n        description: fieldCode.description,\r\n        regex: fieldCode.regex,\r\n        type: parseInt(fieldCode.type),\r\n        status: parseInt(fieldCode.status),\r\n        internal: fieldCode.internal,\r\n        internalTable: fieldCode.internalTable,\r\n        options:optionValue != \"\" ? [ \r\n          {\r\n            id: 0,\r\n            fieldCodeId: 0,\r\n            option: optionValue\r\n          }\r\n        ] : []\r\n      };\r\n  \r\n      this.fieldCodeService.saveFieldCode(fieldCodeDto).subscribe({\r\n              next: (data) => {\r\n                this.toast.success({detail:\"Field Code saved!\", position:'topRight'})\r\n                this.newFieldCodeForm.disable();\r\n              },\r\n              error: (error) => {\r\n                if(error.error === \"Field with that name found\"){\r\n                  this.isUnique = false;\r\n                }\r\n                else {\r\n                  this.toast.error({detail:\"Error\", summary:error, duration:5000, position:'topRight'});\r\n                }\r\n              }\r\n            });\r\n    }\r\n  }\r\n}\r\n","<div class=\"wrapper\">\r\n    <div class=\"sidebar\" data-color=\"danger\" data-background-color=\"white\" data-image=\"./assets/img/sidebar-1.jpg\">\r\n        <app-sidebar></app-sidebar>\r\n        <div class=\"sidebar-background\" style=\"background-image: url(./assets/img/sidebar-4.jpg)\"></div>\r\n    </div>\r\n    <div class=\"main-panel\">\r\n        <app-header></app-header>\r\n        <div class=\"m-3 border-bottom\">\r\n            <h1 class=\"page-heading border-bottom\"> New Field Code</h1>\r\n            <div style=\"overflow: auto\">\r\n                <div class=\"container-fluid\">\r\n                    <form [formGroup]=\"newFieldCodeForm\" (submit)=\"onSubmit(); $event.preventDefault()\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-sm-6\">\r\n                                <div formGroupName=\"fieldCode\">\r\n                                    <!-- Name field -->\r\n                                    <div class=\"mb-3\">\r\n                                        <label for=\"name\" class=\"form-label\">Name</label>\r\n                                        <input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\" />\r\n                                    </div>\r\n                                    <small *ngIf=\"newFieldCodeForm?.get('fieldCode.name')?.dirty && newFieldCodeForm.hasError('required', 'fieldCode.name')\" class=\"text-danger\">Name is required</small>\r\n                                    <small *ngIf=\"!isUnique && !newFieldCodeForm.hasError('required', 'fieldCode.name') && newFieldCodeForm?.get('fieldCode.name')?.dirty\" class=\"text-danger\">Field with this name already exists</small>\r\n                                    <!-- Code field -->\r\n                                    <div class=\"mb-3\">\r\n                                        <label for=\"code\" class=\"form-label\">Code</label>\r\n                                        <input id=\"code\" type=\"text\" class=\"form-control\" formControlName=\"code\" />\r\n                                    </div>\r\n                                    <small *ngIf=\"newFieldCodeForm?.get('fieldCode.code')?.dirty && newFieldCodeForm.hasError('required', 'fieldCode.code')\"  class=\"text-danger\">Code is required</small>\r\n                                    <!-- Description field -->\r\n                                    <div class=\"mb-3\">\r\n                                        <label for=\"description\" class=\"form-label\">Description (optional)</label>\r\n                                        <input id=\"description\" type=\"text\" class=\"form-control\"\r\n                                            formControlName=\"description\" />\r\n                                    </div>\r\n                                    <!-- Regex field -->\r\n                                    <div class=\"mb-3\">\r\n                                        <label for=\"regex\" class=\"form-label\">RegEx (optional)</label>\r\n                                        <input id=\"regex\" type=\"text\" class=\"form-control\" formControlName=\"regex\" />\r\n                                    </div>\r\n                                    <!-- Status dropdown -->\r\n                                    <div class=\"mb-3\">\r\n                                        <label for=\"status\" class=\"form-label\">Status</label>\r\n                                        <select id=\"status\" class=\"form-select\" formControlName=\"status\">\r\n                                            <option *ngFor=\"let status of statuses\" [value]=\"status.id\">\r\n                                                {{ status.value}}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <small *ngIf=\"newFieldCodeForm?.get('fieldCode.status')?.touched && newFieldCodeForm.hasError('required', 'fieldCode.status')\"  class=\"text-danger\">Status is required</small>\r\n                                    <!-- Type dropdown -->\r\n                                    <div class=\"mb-3\">\r\n                                        <label for=\"type\" class=\"form-label\">Type</label>\r\n                                        <select type=\"text\" class=\"form-control\" formControlName=\"type\"\r\n                                            [(ngModel)]=\"selectedType\">\r\n                                            <option *ngFor=\"let type of dataTypes\" [value]=\"type.id\">\r\n                                                {{type.value}}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <small *ngIf=\"newFieldCodeForm?.get('fieldCode.type')?.touched && newFieldCodeForm.hasError('required', 'fieldCode.type')\" class=\"text-danger\">Type is required</small>\r\n                                    <!-- Option input -->\r\n                                    <div class=\"mb-3\" *ngIf=\"selectedType == 4\">\r\n                                        <label for=\"option\" class=\"form-label\">Option</label>\r\n                                        <input id=\"option\" type=\"text\" class=\"form-control\" formControlName=\"option\" />\r\n                                    </div>\r\n                                    <div class=\"mb-3\">\r\n                                        <input id=\"internal\" type=\"checkbox\" class=\"form-check-input\"\r\n                                            formControlName=\"internal\">\r\n                                        <label for=\"internal\" class=\"form-check-label\">Internal</label>\r\n                                    </div>\r\n                                    <div class=\"mb-3\">\r\n                                        <button type=\"submit\" class=\"btn btn-primary\"\r\n                                            [disabled]=\"!newFieldCodeForm.valid\">Submit</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    <div class=\"mb-3\">\r\n                        <a href=\"/home\">\r\n                            <button class=\"btn btn-primary\">Back</button>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}