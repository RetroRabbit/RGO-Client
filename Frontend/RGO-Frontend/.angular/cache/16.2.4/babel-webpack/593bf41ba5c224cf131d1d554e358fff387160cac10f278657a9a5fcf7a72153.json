{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/charts.service\";\nfunction ReportComponent_li_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"div\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 8);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 9);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const label_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", label_r1, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.chartData.data[i_r2], \" employees\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r0.calculatePercentage(ctx_r0.chartData.data[i_r2]), \"% of total)\");\n  }\n}\nexport let ReportComponent = /*#__PURE__*/(() => {\n  class ReportComponent {\n    constructor(chartService) {\n      this.chartService = chartService;\n      this.activeChart = null;\n      this.showReport = false;\n      this.clearActiveChart = () => {};\n    }\n    generateReport() {\n      const reportHTML = this.generateHTMLReport();\n      const newWindow = window.open();\n      if (newWindow) {\n        newWindow.document.open();\n        newWindow.document.write(reportHTML);\n        newWindow.document.close();\n      } else {\n        console.error('Failed to open a new window for the report.');\n      }\n    }\n    generateHTMLReport() {\n      const chartHTML = `<h1>${this.chartData.label}</h1>`;\n      const dataHTML = `<p>Data: ${JSON.stringify(this.chartData.data)}</p>`;\n      return `<html><body>${chartHTML}${dataHTML}</body></html>`;\n    }\n    getTotalEmployees() {\n      return this.chartData.data.reduce((total, value) => total + value, 0);\n    }\n    calculatePercentage(value) {\n      const total = this.getTotalEmployees();\n      const percentage = value / total * 100;\n      return percentage.toFixed(2);\n    }\n    downloadReportAsCSV(dataType) {\n      this.chartService.downloadCSV(dataType).subscribe(data => {\n        const blob = new Blob([data], {\n          type: 'text/csv'\n        });\n        const downloadLink = document.createElement('a');\n        downloadLink.href = window.URL.createObjectURL(blob);\n        downloadLink.download = 'Report.csv';\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n      });\n    }\n    static #_ = this.ɵfac = function ReportComponent_Factory(t) {\n      return new (t || ReportComponent)(i0.ɵɵdirectiveInject(i1.ChartService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ReportComponent,\n      selectors: [[\"app-report\"]],\n      inputs: {\n        chartData: \"chartData\"\n      },\n      decls: 21,\n      vars: 5,\n      consts: [[1, \"report-wrapper\"], [1, \"report-container\"], [1, \"report-description\"], [1, \"chart-info\"], [1, \"chart-data\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"data-label\"], [1, \"data-value\"], [1, \"data-percentage\"]],\n      template: function ReportComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\", 2);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 3)(7, \"strong\");\n          i0.ɵɵtext(8, \"Chart Type:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(9);\n          i0.ɵɵelement(10, \"br\");\n          i0.ɵɵelementStart(11, \"strong\");\n          i0.ɵɵtext(12, \"Total Employees:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(13);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 4)(15, \"h2\");\n          i0.ɵɵtext(16, \"Chart Data:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"ul\");\n          i0.ɵɵtemplate(18, ReportComponent_li_18_Template, 7, 3, \"li\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(19, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function ReportComponent_Template_button_click_19_listener() {\n            return ctx.downloadReportAsCSV(ctx.chartData.dataType);\n          });\n          i0.ɵɵtext(20, \"Download CSV\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.chartData.name);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"This report provides information about the \", ctx.chartData.name, \" chart:\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.chartData.type, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.getTotalEmployees(), \" employees \");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.chartData.labels);\n        }\n      },\n      styles: [\".report-wrapper[_ngcontent-%COMP%]{background-color:#f0f0f0;padding:20px;border:1px solid #ccc;border-radius:5px;margin-bottom:20px}.report-container[_ngcontent-%COMP%]{font-family:Arial,sans-serif;background-color:#fff;padding:20px;border:1px solid #e0e0e0;border-radius:5px;box-shadow:0 0 5px #ccc}h1[_ngcontent-%COMP%]{font-size:24px;margin-bottom:10px;color:#333}.report-description[_ngcontent-%COMP%]{font-size:16px;margin-bottom:20px}.chart-info[_ngcontent-%COMP%]{font-size:14px;margin-bottom:20px}.chart-data[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:20px;margin-bottom:10px}.data-label[_ngcontent-%COMP%]{font-weight:700;margin-right:5px}.data-value[_ngcontent-%COMP%]{margin-right:10px}.data-percentage[_ngcontent-%COMP%]{color:#555}\"]\n    });\n  }\n  return ReportComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}