{"ast":null,"code":"import { API } from '../models/constants/urls.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChartService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getAllCharts() {\n    return this.httpClient.get(`${API.HttpBaseURL}/chart/get`);\n  }\n  createChart(dataType, chartName, chartType) {\n    const queryParams = `?dataType=${dataType}&chartName=${chartName}&chartType=${chartType}`;\n    return this.httpClient.post(`${API.HttpBaseURL}/chart/create${queryParams}`, {});\n  }\n  getTotalEmployees() {\n    return this.httpClient.get(`${API.HttpBaseURL}/chart/employees/total`);\n  }\n  getChartDataByType(dataType) {\n    const queryParams = `?dataType=${dataType}`;\n    return this.httpClient.get(`${API.HttpBaseURL}/chart/data/${queryParams}`);\n  }\n  updateChart(dataType) {\n    return this.httpClient.put(`${API.HttpBaseURL}/chart/update`, dataType);\n  }\n  deleteChart(chartId) {\n    const queryParams = `?Id=${chartId}`;\n    return this.httpClient.delete(`${API.HttpBaseURL}/chart/delete${queryParams}`);\n  }\n  getColumns() {\n    return this.httpClient.get(`${API.HttpBaseURL}/chart/column`);\n  }\n  downloadCSV(dataType) {\n    const queryParams = `?dataType=${dataType}`;\n    return this.httpClient.get(`${API.HttpBaseURL}/chart/report/export${queryParams}`, {\n      responseType: 'arraybuffer'\n    });\n  }\n  static #_ = this.ɵfac = function ChartService_Factory(t) {\n    return new (t || ChartService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChartService,\n    factory: ChartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["API","ChartService","constructor","httpClient","getAllCharts","get","HttpBaseURL","createChart","dataType","chartName","chartType","queryParams","post","getTotalEmployees","getChartDataByType","updateChart","put","deleteChart","chartId","delete","getColumns","downloadCSV","responseType","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\HP\\Desktop\\GOP\\RGO-Client\\Frontend\\RGO-Frontend\\src\\app\\services\\charts.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Chart } from '../models/charts.interface';\r\nimport { API } from '../models/constants/urls.constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChartService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getAllCharts(): Observable<Chart[]> {\r\n    return this.httpClient.get<Chart[]>(`${API.HttpBaseURL}/chart/get`);\r\n  }\r\n\r\n  createChart(dataType: string, chartName: string, chartType: string): Observable<any> {\r\n    const queryParams = `?dataType=${dataType}&chartName=${chartName}&chartType=${chartType}`;\r\n    return this.httpClient.post(`${API.HttpBaseURL}/chart/create${queryParams}`, {});\r\n  }\r\n\r\n  getTotalEmployees(): Observable<number> {\r\n    return this.httpClient.get<number>(`${API.HttpBaseURL}/chart/employees/total`);\r\n  }\r\n\r\n  getChartDataByType(dataType: string): Observable<any> {\r\n    const queryParams = `?dataType=${dataType}`;\r\n    return this.httpClient.get<any>(`${API.HttpBaseURL}/chart/data/${queryParams}`);\r\n  }\r\n\r\n  updateChart(dataType: Chart): Observable<Chart> {\r\n  return this.httpClient.put<Chart>(`${API.HttpBaseURL}/chart/update`, dataType);\r\n  }\r\n \r\n  deleteChart(chartId: number): Observable<any> {\r\n    const queryParams = `?Id=${chartId}`;\r\n    return this.httpClient.delete<any>(`${API.HttpBaseURL}/chart/delete${queryParams}`);\r\n  }\r\n\r\n  getColumns(): Observable<string[]> {\r\n    return this.httpClient.get<string[]>(`${API.HttpBaseURL}/chart/column`);\r\n  }\r\n\r\n  downloadCSV(dataType: string): Observable<ArrayBuffer> {\r\n    const queryParams = `?dataType=${dataType}`;\r\n    return this.httpClient.get(`${API.HttpBaseURL}/chart/report/export${queryParams}`, {\r\n      responseType: 'arraybuffer'\r\n    });\r\n  }\r\n  \r\n}"],"mappings":"AAIA,SAASA,GAAG,QAAQ,oCAAoC;;;AAKxD,OAAM,MAAOC,YAAY;EACvBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAU,GAAGL,GAAG,CAACM,WAAW,YAAY,CAAC;EACrE;EAEAC,WAAWA,CAACC,QAAgB,EAAEC,SAAiB,EAAEC,SAAiB;IAChE,MAAMC,WAAW,GAAG,aAAaH,QAAQ,cAAcC,SAAS,cAAcC,SAAS,EAAE;IACzF,OAAO,IAAI,CAACP,UAAU,CAACS,IAAI,CAAC,GAAGZ,GAAG,CAACM,WAAW,gBAAgBK,WAAW,EAAE,EAAE,EAAE,CAAC;EAClF;EAEAE,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACV,UAAU,CAACE,GAAG,CAAS,GAAGL,GAAG,CAACM,WAAW,wBAAwB,CAAC;EAChF;EAEAQ,kBAAkBA,CAACN,QAAgB;IACjC,MAAMG,WAAW,GAAG,aAAaH,QAAQ,EAAE;IAC3C,OAAO,IAAI,CAACL,UAAU,CAACE,GAAG,CAAM,GAAGL,GAAG,CAACM,WAAW,eAAeK,WAAW,EAAE,CAAC;EACjF;EAEAI,WAAWA,CAACP,QAAe;IAC3B,OAAO,IAAI,CAACL,UAAU,CAACa,GAAG,CAAQ,GAAGhB,GAAG,CAACM,WAAW,eAAe,EAAEE,QAAQ,CAAC;EAC9E;EAEAS,WAAWA,CAACC,OAAe;IACzB,MAAMP,WAAW,GAAG,OAAOO,OAAO,EAAE;IACpC,OAAO,IAAI,CAACf,UAAU,CAACgB,MAAM,CAAM,GAAGnB,GAAG,CAACM,WAAW,gBAAgBK,WAAW,EAAE,CAAC;EACrF;EAEAS,UAAUA,CAAA;IACR,OAAO,IAAI,CAACjB,UAAU,CAACE,GAAG,CAAW,GAAGL,GAAG,CAACM,WAAW,eAAe,CAAC;EACzE;EAEAe,WAAWA,CAACb,QAAgB;IAC1B,MAAMG,WAAW,GAAG,aAAaH,QAAQ,EAAE;IAC3C,OAAO,IAAI,CAACL,UAAU,CAACE,GAAG,CAAC,GAAGL,GAAG,CAACM,WAAW,uBAAuBK,WAAW,EAAE,EAAE;MACjFW,YAAY,EAAE;KACf,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBAvCUtB,YAAY,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ3B,YAAY;IAAA4B,OAAA,EAAZ5B,YAAY,CAAA6B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}