{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { statuses } from 'src/app/models/constants/statuses.constants';\nimport { dataTypes } from 'src/app/models/constants/types.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/field-code.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"ng-angular-popup\";\nfunction UpdateFieldComponent_small_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 27);\n    i0.ɵɵtext(1, \"Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateFieldComponent_small_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 27);\n    i0.ɵɵtext(1, \"Code is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateFieldComponent_option_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", status_r8.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", status_r8.value, \" \");\n  }\n}\nfunction UpdateFieldComponent_option_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", type_r9.value, \" \");\n  }\n}\nfunction UpdateFieldComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"label\", 29);\n    i0.ɵɵtext(2, \"Add Option\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function UpdateFieldComponent_div_34_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.addOption());\n    });\n    i0.ɵɵtext(4, \" + \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction UpdateFieldComponent_div_35_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 33)(2, \"label\", 34);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 35);\n    i0.ɵɵelementStart(5, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function UpdateFieldComponent_div_35_div_1_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const i_r14 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.removeOption(i_r14));\n    });\n    i0.ɵɵtext(6, \" - \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const i_r14 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"option\", i_r14, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Option \", i_r14 + 1, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"option\", i_r14, \"\");\n    i0.ɵɵproperty(\"formControlName\", i_r14);\n  }\n}\nfunction UpdateFieldComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵtemplate(1, UpdateFieldComponent_div_35_div_1_Template, 7, 4, \"div\", 32);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.options.controls);\n  }\n}\nfunction UpdateFieldComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 37)(2, \"div\", 38)(3, \"button\", 39);\n    i0.ɵɵlistener(\"click\", function UpdateFieldComponent_div_40_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onClick());\n    });\n    i0.ɵɵtext(4, \"Update\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\")(6, \"a\", 40);\n    i0.ɵɵlistener(\"click\", function UpdateFieldComponent_div_40_Template_a_click_6_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.confirmArchive($event));\n    });\n    i0.ɵɵelementStart(7, \"button\", 41);\n    i0.ɵɵtext(8, \"Archive\");\n    i0.ɵɵelementEnd()()()()();\n  }\n}\nfunction UpdateFieldComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 42)(1, \"button\", 43);\n    i0.ɵɵtext(2, \"Submit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function UpdateFieldComponent_div_41_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.onCancel());\n    });\n    i0.ɵɵtext(4, \"Cancel\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r7.newFieldCodeForm.valid);\n  }\n}\nexport let UpdateFieldComponent = /*#__PURE__*/(() => {\n  class UpdateFieldComponent {\n    constructor(router, fieldCodeService, fb, toast) {\n      this.router = router;\n      this.fieldCodeService = fieldCodeService;\n      this.fb = fb;\n      this.toast = toast;\n      this.statuses = statuses;\n      this.dataTypes = dataTypes;\n      this.isUpdateClicked = false;\n      this.isArchiveClicked = false;\n      this.initializeForm();\n    }\n    ngOnInit() {\n      this.newFieldCodeForm.disable();\n    }\n    initializeForm() {\n      this.selectedType = this.selectedFieldCode?.type;\n      this.newFieldCodeForm = this.fb.group({\n        fieldCode: this.fb.group({\n          code: [this.selectedFieldCode?.code, Validators.required],\n          name: [this.selectedFieldCode?.name, Validators.required],\n          description: [this.selectedFieldCode?.description],\n          regex: [this.selectedFieldCode?.regex],\n          type: [this.selectedType],\n          status: [this.selectedFieldCode?.status],\n          option: [this.selectedFieldCode?.options ? this.selectedFieldCode.options.map(option => option.option) : []],\n          internal: [false],\n          internalTable: [''],\n          options: this.fb.array([])\n        })\n      });\n    }\n    get options() {\n      return this.newFieldCodeForm.get('fieldCode.options');\n    }\n    addOption() {\n      this.options.push(this.fb.control(''));\n    }\n    removeOption(index) {\n      this.options.removeAt(index);\n    }\n    onClick() {\n      this.isUpdateClicked = true;\n      this.newFieldCodeForm.enable();\n    }\n    onSubmit() {\n      if (this.newFieldCodeForm.valid) {\n        const {\n          fieldCode\n        } = this.newFieldCodeForm.value;\n        const optionsArray = this.options.value.map(optionValue => {\n          return {\n            id: 0,\n            fieldCodeId: this.selectedFieldCode?.id,\n            option: optionValue\n          };\n        });\n        const existingOptions = this.selectedFieldCode?.options?.map(option => option.option) || [];\n        const optionsToRemove = existingOptions.filter(option => !optionsArray.some(opt => opt.option === option));\n        const updatedOptions = optionsArray.filter(option => !optionsToRemove.includes(option.option));\n        const fieldCodeDto = {\n          id: this.selectedFieldCode?.id,\n          code: fieldCode.code,\n          name: fieldCode.name,\n          description: fieldCode.description,\n          regex: fieldCode.regex,\n          type: parseInt(this.selectedType),\n          status: parseInt(fieldCode.status),\n          internal: fieldCode.internal,\n          internalTable: fieldCode.internalTable || '',\n          options: updatedOptions.map(opt => opt)\n        };\n        this.fieldCodeService.updateFieldCode(fieldCodeDto).subscribe({\n          next: data => {\n            this.toast.success({\n              detail: \"Field Details updated!\",\n              position: 'topRight'\n            });\n            this.selectedFieldCode = data;\n            this.newFieldCodeForm.disable();\n          },\n          error: error => {\n            this.toast.error({\n              detail: \"Error\",\n              summary: error,\n              duration: 5000,\n              position: 'topRight'\n            });\n          }\n        });\n      }\n    }\n    onCancel() {\n      this.isUpdateClicked = false;\n      this.newFieldCodeForm.reset();\n      this.initializeForm();\n      this.newFieldCodeForm.disable();\n    }\n    archiveFieldCode() {\n      if (this.selectedFieldCode) {\n        this.fieldCodeService.deleteFieldCode(this.selectedFieldCode).subscribe({\n          next: data => {\n            this.toast.success({\n              detail: \"Field Code Archived!\",\n              position: 'topRight'\n            });\n            this.newFieldCodeForm.disable();\n          },\n          error: error => {\n            this.toast.error({\n              detail: \"Error\",\n              summary: error,\n              duration: 5000,\n              position: 'topRight'\n            });\n          }\n        });\n      }\n    }\n    confirmArchive(event) {\n      const confirmation = window.confirm('Are you sure you want to archive this field code?');\n      if (confirmation) {\n        this.archiveFieldCode();\n      } else {\n        event.preventDefault();\n      }\n    }\n    ngOnChanges(changes) {\n      if (changes['selectedFieldCode']) {\n        this.newFieldCodeForm.reset();\n        this.initializeForm();\n        const optionsArray = this.newFieldCodeForm.get('fieldCode.options');\n        if (this.selectedFieldCode?.options) {\n          this.selectedFieldCode.options.forEach(option => {\n            optionsArray.push(this.fb.control(option.option));\n          });\n        }\n      }\n    }\n    static #_ = this.ɵfac = function UpdateFieldComponent_Factory(t) {\n      return new (t || UpdateFieldComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FieldCodeService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.NgToastService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UpdateFieldComponent,\n      selectors: [[\"app-update-field\"]],\n      inputs: {\n        selectedFieldCode: \"selectedFieldCode\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 46,\n      vars: 10,\n      consts: [[1, \"container-fluid\"], [3, \"formGroup\", \"submit\"], [1, \"row\"], [1, \"col-sm-6\"], [\"formGroupName\", \"fieldCode\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"code\", 1, \"form-label\"], [\"id\", \"code\", \"type\", \"text\", \"formControlName\", \"code\", 1, \"form-control\"], [\"for\", \"description\", 1, \"form-label\"], [\"id\", \"description\", \"type\", \"text\", \"formControlName\", \"description\", 1, \"form-control\"], [\"for\", \"regex\", 1, \"form-label\"], [\"id\", \"regex\", \"type\", \"text\", \"formControlName\", \"regex\", 1, \"form-control\"], [\"for\", \"status\", 1, \"form-label\"], [\"id\", \"status\", \"formControlName\", \"status\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"type\", 1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"type\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"mb-3\", 4, \"ngIf\"], [\"formArrayName\", \"options\", 4, \"ngIf\"], [\"id\", \"internal\", \"type\", \"checkbox\", \"formControlName\", \"internal\", 1, \"form-check-input\"], [\"for\", \"internal\", 1, \"form-check-label\"], [\"class\", \"mb-3 d-flex\", 4, \"ngIf\"], [\"href\", \"/home\"], [1, \"btn\", \"btn-primary\"], [1, \"text-danger\"], [3, \"value\"], [\"for\", \"option\", 1, \"form-label\"], [\"id\", \"btnAddOption\", \"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"formArrayName\", \"options\"], [4, \"ngFor\", \"ngForOf\"], [1, \"input-group\"], [\"id\", \"lblOption\", 1, \"form-label\", 3, \"for\"], [\"type\", \"text\", 1, \"form-control\", 3, \"id\", \"formControlName\"], [\"id\", \"btnRemoveOption\", \"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"d-flex\"], [1, \"mr-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"href\", \"/home\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"custom-button\"], [1, \"mb-3\", \"d-flex\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"custom-button\", 3, \"click\"]],\n      template: function UpdateFieldComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0)(2, \"form\", 1);\n          i0.ɵɵlistener(\"submit\", function UpdateFieldComponent_Template_form_submit_2_listener($event) {\n            ctx.onSubmit();\n            return $event.preventDefault();\n          });\n          i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \"Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(10, UpdateFieldComponent_small_10_Template, 2, 0, \"small\", 8);\n          i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 9);\n          i0.ɵɵtext(13, \"Code\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(15, UpdateFieldComponent_small_15_Template, 2, 0, \"small\", 8);\n          i0.ɵɵelementStart(16, \"div\", 5)(17, \"label\", 11);\n          i0.ɵɵtext(18, \"Description (optional)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(19, \"input\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"div\", 5)(21, \"label\", 13);\n          i0.ɵɵtext(22, \"RegEx (optional)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(23, \"input\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 5)(25, \"label\", 15);\n          i0.ɵɵtext(26, \"Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(27, \"select\", 16);\n          i0.ɵɵtemplate(28, UpdateFieldComponent_option_28_Template, 2, 2, \"option\", 17);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(29, \"div\", 5)(30, \"label\", 18);\n          i0.ɵɵtext(31, \"Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"select\", 19);\n          i0.ɵɵlistener(\"ngModelChange\", function UpdateFieldComponent_Template_select_ngModelChange_32_listener($event) {\n            return ctx.selectedType = $event;\n          });\n          i0.ɵɵtemplate(33, UpdateFieldComponent_option_33_Template, 2, 2, \"option\", 17);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(34, UpdateFieldComponent_div_34_Template, 5, 0, \"div\", 20);\n          i0.ɵɵtemplate(35, UpdateFieldComponent_div_35_Template, 2, 1, \"div\", 21);\n          i0.ɵɵelementStart(36, \"div\", 5);\n          i0.ɵɵelement(37, \"input\", 22);\n          i0.ɵɵelementStart(38, \"label\", 23);\n          i0.ɵɵtext(39, \"Internal\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(40, UpdateFieldComponent_div_40_Template, 9, 0, \"div\", 20);\n          i0.ɵɵtemplate(41, UpdateFieldComponent_div_41_Template, 5, 1, \"div\", 24);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(42, \"div\", 5)(43, \"a\", 25)(44, \"button\", 26);\n          i0.ɵɵtext(45, \"Back\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.newFieldCodeForm);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", (ctx.newFieldCodeForm == null ? null : (tmp_1_0 = ctx.newFieldCodeForm.get(\"fieldCode.name\")) == null ? null : tmp_1_0.dirty) || ctx.newFieldCodeForm.hasError(\"required\", \"fieldCode.name\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", (ctx.newFieldCodeForm == null ? null : (tmp_2_0 = ctx.newFieldCodeForm.get(\"fieldCode.code\")) == null ? null : tmp_2_0.dirty) || ctx.newFieldCodeForm.hasError(\"required\", \"fieldCode.code\"));\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngForOf\", ctx.statuses);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedType);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.dataTypes);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedType == 4);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedType == 4);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.isUpdateClicked == false && !ctx.isArchiveClicked);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isUpdateClicked == true);\n        }\n      },\n      styles: [\".custom-button[_ngcontent-%COMP%]{background-color:#f43737;transition:background-color .3s,box-shadow .3s}.custom-button[_ngcontent-%COMP%]:hover{background-color:red;box-shadow:0 6px 8px #0000001a}#btnRemoveOption[_ngcontent-%COMP%], #btnAddOption[_ngcontent-%COMP%]{border:1px outset;height:30px;width:30px;border-radius:20px;padding:0;margin-left:20px}#lblOption[_ngcontent-%COMP%]{margin-right:15px}\"]\n    });\n  }\n  return UpdateFieldComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}